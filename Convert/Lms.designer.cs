#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lms
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DTwork")]
	public partial class LmsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBulletinBoard(BulletinBoard instance);
    partial void UpdateBulletinBoard(BulletinBoard instance);
    partial void DeleteBulletinBoard(BulletinBoard instance);
    partial void InsertCDPath(CDPath instance);
    partial void UpdateCDPath(CDPath instance);
    partial void DeleteCDPath(CDPath instance);
    partial void InsertContent(Content instance);
    partial void UpdateContent(Content instance);
    partial void DeleteContent(Content instance);
    partial void InsertCourseRequest(CourseRequest instance);
    partial void UpdateCourseRequest(CourseRequest instance);
    partial void DeleteCourseRequest(CourseRequest instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertCTrackRequest(CTrackRequest instance);
    partial void UpdateCTrackRequest(CTrackRequest instance);
    partial void DeleteCTrackRequest(CTrackRequest instance);
    partial void InsertCTrack(CTrack instance);
    partial void UpdateCTrack(CTrack instance);
    partial void DeleteCTrack(CTrack instance);
    partial void InsertCurrency(Currency instance);
    partial void UpdateCurrency(Currency instance);
    partial void DeleteCurrency(Currency instance);
    partial void InsertEntity(Entity instance);
    partial void UpdateEntity(Entity instance);
    partial void DeleteEntity(Entity instance);
    partial void InsertForumReply(ForumReply instance);
    partial void UpdateForumReply(ForumReply instance);
    partial void DeleteForumReply(ForumReply instance);
    partial void InsertForumTopic(ForumTopic instance);
    partial void UpdateForumTopic(ForumTopic instance);
    partial void DeleteForumTopic(ForumTopic instance);
    partial void InsertGroupMember(GroupMember instance);
    partial void UpdateGroupMember(GroupMember instance);
    partial void DeleteGroupMember(GroupMember instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertNew(New instance);
    partial void UpdateNew(New instance);
    partial void DeleteNew(New instance);
    partial void InsertObjectRegion(ObjectRegion instance);
    partial void UpdateObjectRegion(ObjectRegion instance);
    partial void DeleteObjectRegion(ObjectRegion instance);
    partial void InsertRight(Right instance);
    partial void UpdateRight(Right instance);
    partial void DeleteRight(Right instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertVTerm(VTerm instance);
    partial void UpdateVTerm(VTerm instance);
    partial void DeleteVTerm(VTerm instance);
    partial void InsertTaskSolution(TaskSolution instance);
    partial void UpdateTaskSolution(TaskSolution instance);
    partial void DeleteTaskSolution(TaskSolution instance);
    partial void InsertTestAnswer(TestAnswer instance);
    partial void UpdateTestAnswer(TestAnswer instance);
    partial void DeleteTestAnswer(TestAnswer instance);
    partial void InsertTestQuestion(TestQuestion instance);
    partial void UpdateTestQuestion(TestQuestion instance);
    partial void DeleteTestQuestion(TestQuestion instance);
    partial void InsertTestResult(TestResult instance);
    partial void UpdateTestResult(TestResult instance);
    partial void DeleteTestResult(TestResult instance);
    partial void InsertTest(Test instance);
    partial void UpdateTest(Test instance);
    partial void DeleteTest(Test instance);
    partial void InsertTheme(Theme instance);
    partial void UpdateTheme(Theme instance);
    partial void DeleteTheme(Theme instance);
    partial void InsertTrack(Track instance);
    partial void UpdateTrack(Track instance);
    partial void DeleteTrack(Track instance);
    partial void InsertTrainingBlocking(TrainingBlocking instance);
    partial void UpdateTrainingBlocking(TrainingBlocking instance);
    partial void DeleteTrainingBlocking(TrainingBlocking instance);
    partial void InsertTraining(Training instance);
    partial void UpdateTraining(Training instance);
    partial void DeleteTraining(Training instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertVocabulary(Vocabulary instance);
    partial void UpdateVocabulary(Vocabulary instance);
    partial void DeleteVocabulary(Vocabulary instance);
    #endregion
		
		public LmsDataContext() : 
				base(global::N2.Lms.Properties.Settings.Default.DTworkConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LmsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LmsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LmsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LmsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BulletinBoard> BulletinBoards
		{
			get
			{
				return this.GetTable<BulletinBoard>();
			}
		}
		
		public System.Data.Linq.Table<CDPath> CDPaths
		{
			get
			{
				return this.GetTable<CDPath>();
			}
		}
		
		public System.Data.Linq.Table<Content> Contents
		{
			get
			{
				return this.GetTable<Content>();
			}
		}
		
		public System.Data.Linq.Table<CourseDomain> CourseDomains
		{
			get
			{
				return this.GetTable<CourseDomain>();
			}
		}
		
		public System.Data.Linq.Table<CourseRequest> CourseRequests
		{
			get
			{
				return this.GetTable<CourseRequest>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<CourseType> CourseTypes
		{
			get
			{
				return this.GetTable<CourseType>();
			}
		}
		
		public System.Data.Linq.Table<CTrackRequest> CTrackRequests
		{
			get
			{
				return this.GetTable<CTrackRequest>();
			}
		}
		
		public System.Data.Linq.Table<CTrack> CTracks
		{
			get
			{
				return this.GetTable<CTrack>();
			}
		}
		
		public System.Data.Linq.Table<Currency> Currencies
		{
			get
			{
				return this.GetTable<Currency>();
			}
		}
		
		public System.Data.Linq.Table<Entity> Entities
		{
			get
			{
				return this.GetTable<Entity>();
			}
		}
		
		public System.Data.Linq.Table<ForumReply> ForumReplies
		{
			get
			{
				return this.GetTable<ForumReply>();
			}
		}
		
		public System.Data.Linq.Table<ForumTopic> ForumTopics
		{
			get
			{
				return this.GetTable<ForumTopic>();
			}
		}
		
		public System.Data.Linq.Table<GroupMember> GroupMembers
		{
			get
			{
				return this.GetTable<GroupMember>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<New> News
		{
			get
			{
				return this.GetTable<New>();
			}
		}
		
		public System.Data.Linq.Table<ObjectRegion> ObjectRegions
		{
			get
			{
				return this.GetTable<ObjectRegion>();
			}
		}
		
		public System.Data.Linq.Table<Region> Regions
		{
			get
			{
				return this.GetTable<Region>();
			}
		}
		
		public System.Data.Linq.Table<Right> Rights
		{
			get
			{
				return this.GetTable<Right>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedules
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<VTerm> VTerms
		{
			get
			{
				return this.GetTable<VTerm>();
			}
		}
		
		public System.Data.Linq.Table<TaskSolution> TaskSolutions
		{
			get
			{
				return this.GetTable<TaskSolution>();
			}
		}
		
		public System.Data.Linq.Table<TestAnswer> TestAnswers
		{
			get
			{
				return this.GetTable<TestAnswer>();
			}
		}
		
		public System.Data.Linq.Table<TestQuestion> TestQuestions
		{
			get
			{
				return this.GetTable<TestQuestion>();
			}
		}
		
		public System.Data.Linq.Table<TestResult> TestResults
		{
			get
			{
				return this.GetTable<TestResult>();
			}
		}
		
		public System.Data.Linq.Table<Test> Tests
		{
			get
			{
				return this.GetTable<Test>();
			}
		}
		
		public System.Data.Linq.Table<TestWriteTable> TestWriteTables
		{
			get
			{
				return this.GetTable<TestWriteTable>();
			}
		}
		
		public System.Data.Linq.Table<Theme> Themes
		{
			get
			{
				return this.GetTable<Theme>();
			}
		}
		
		public System.Data.Linq.Table<Track> Tracks
		{
			get
			{
				return this.GetTable<Track>();
			}
		}
		
		public System.Data.Linq.Table<TrainingBlocking> TrainingBlockings
		{
			get
			{
				return this.GetTable<TrainingBlocking>();
			}
		}
		
		public System.Data.Linq.Table<Training> Trainings
		{
			get
			{
				return this.GetTable<Training>();
			}
		}
		
		public System.Data.Linq.Table<UserProfileData> UserProfileDatas
		{
			get
			{
				return this.GetTable<UserProfileData>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<Vocabulary> Vocabularies
		{
			get
			{
				return this.GetTable<Vocabulary>();
			}
		}
		
		[Function(Name="dbo.AllDistinctTrainingStudents", IsComposable=true)]
		public IQueryable<AllDistinctTrainingStudentsResult> AllDistinctTrainingStudents([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return this.CreateMethodCallQuery<AllDistinctTrainingStudentsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		}
		
		[Function(Name="dbo.UserName", IsComposable=true)]
		public string UserName([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(DbType="Bit")] System.Nullable<bool> eng)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, eng).ReturnValue));
		}
		
		[Function(Name="dbo.AllGroupMembers", IsComposable=true)]
		public IQueryable<AllGroupMembersResult> AllGroupMembers([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return this.CreateMethodCallQuery<AllGroupMembersResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		}
		
		[Function(Name="dbo.AllStudentTrainings", IsComposable=true)]
		public IQueryable<AllStudentTrainingsResult> AllStudentTrainings([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return this.CreateMethodCallQuery<AllStudentTrainingsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		}
		
		[Function(Name="dbo.AllSubThemes", IsComposable=true)]
		public IQueryable<AllSubThemesResult> AllSubThemes([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> themeid, [Parameter(DbType="Int")] System.Nullable<int> lang)
		{
			return this.CreateMethodCallQuery<AllSubThemesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), themeid, lang);
		}
		
		[Function(Name="dbo.AllTrainingStudents", IsComposable=true)]
		public IQueryable<AllTrainingStudentsResult> AllTrainingStudents([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return this.CreateMethodCallQuery<AllTrainingStudentsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		}
		
		[Function(Name="dbo.CountCompletePractice", IsComposable=true)]
		public System.Nullable<int> CountCompletePractice([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trainingId, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> studentid)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), trainingId, studentid).ReturnValue));
		}
		
		[Function(Name="dbo.CountCompleteSolutions", IsComposable=true)]
		public System.Nullable<int> CountCompleteSolutions([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trainingId, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> studentid)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), trainingId, studentid).ReturnValue));
		}
		
		[Function(Name="dbo.CountCompleteTests", IsComposable=true)]
		public System.Nullable<int> CountCompleteTests([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trainingId, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> studentid)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), trainingId, studentid).ReturnValue));
		}
		
		[Function(Name="dbo.CountStudentSolutions", IsComposable=true)]
		public System.Nullable<int> CountStudentSolutions([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trainingId, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> studentid)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), trainingId, studentid).ReturnValue));
		}
		
		[Function(Name="dbo.CountStudentsPassedTest", IsComposable=true)]
		public IQueryable<CountStudentsPassedTestResult> CountStudentsPassedTest([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> training)
		{
			return this.CreateMethodCallQuery<CountStudentsPassedTestResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), training);
		}
		
		[Function(Name="dbo.CountTestResults", IsComposable=true)]
		public System.Nullable<int> CountTestResults([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> test)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), test).ReturnValue));
		}
		
		[Function(Name="dbo.CountTestTries", IsComposable=true)]
		public System.Nullable<int> CountTestTries([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> training, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> test)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), training, test).ReturnValue));
		}
		
		[Function(Name="dbo.CourseDuration", IsComposable=true)]
		public System.Nullable<int> CourseDuration([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id).ReturnValue));
		}
		
		[Function(Name="dbo.CourseIsActive", IsComposable=true)]
		public System.Nullable<bool> CourseIsActive([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id).ReturnValue));
		}
		
		[Function(Name="dbo.CourseOfTest", IsComposable=true)]
		public System.Nullable<System.Guid> CourseOfTest([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id).ReturnValue));
		}
		
		[Function(Name="dbo.CourseOfTestQuestion", IsComposable=true)]
		public System.Nullable<System.Guid> CourseOfTestQuestion([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id).ReturnValue));
		}
		
		[Function(Name="dbo.CourseOfTheme", IsComposable=true)]
		public System.Nullable<System.Guid> CourseOfTheme([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id).ReturnValue));
		}
		
		[Function(Name="dbo.CourseTests", IsComposable=true)]
		public IQueryable<CourseTestsResult> CourseTests([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return this.CreateMethodCallQuery<CourseTestsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		}
		
		[Function(Name="dbo.dcelegacy_Fn_Courses_AreaTopmostParentID", IsComposable=true)]
		public string dcelegacy_Fn_Courses_AreaTopmostParentID([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> areaID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), areaID).ReturnValue));
		}
		
		[Function(Name="dbo.dcelegacy_Fn_Courses_GetAreaName", IsComposable=true)]
		public string dcelegacy_Fn_Courses_GetAreaName([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> areaID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), areaID).ReturnValue));
		}
		
		[Function(Name="dbo.dcelegacy_Fn_Courses_GetCourseAreaID", IsComposable=true)]
		public System.Nullable<System.Guid> dcelegacy_Fn_Courses_GetCourseAreaID([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> courseID)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), courseID).ReturnValue));
		}
		
		[Function(Name="dbo.dcelegacy_Fn_Subscribe_GetBestTrainingID", IsComposable=true)]
		public System.Nullable<System.Guid> dcelegacy_Fn_Subscribe_GetBestTrainingID([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> courseID, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> requestDate)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), courseID, requestDate).ReturnValue));
		}
		
		[Function(Name="dbo.dcelegacy_Fn_Trainings_GetStudentCount", IsComposable=true)]
		public System.Nullable<int> dcelegacy_Fn_Trainings_GetStudentCount([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trainingID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), trainingID).ReturnValue));
		}
		
		[Function(Name="dbo.dcereports_Fn_Tests_GetStudentTestResults", IsComposable=true)]
		public IQueryable<dcereports_Fn_Tests_GetStudentTestResultsResult> dcereports_Fn_Tests_GetStudentTestResults([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> studentID)
		{
			return this.CreateMethodCallQuery<dcereports_Fn_Tests_GetStudentTestResultsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), studentID);
		}
		
		[Function(Name="dbo.dcereports_Fn_Tests_GetTestResults", IsComposable=true)]
		public IQueryable<dcereports_Fn_Tests_GetTestResultsResult> dcereports_Fn_Tests_GetTestResults([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> courseID, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> studentID)
		{
			return this.CreateMethodCallQuery<dcereports_Fn_Tests_GetTestResultsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), courseID, studentID);
		}
		
		[Function(Name="dbo.dcereports_Fn_TutorDiary_GetTrainingsOfCourseType", IsComposable=true)]
		public IQueryable<dcereports_Fn_TutorDiary_GetTrainingsOfCourseTypeResult> dcereports_Fn_TutorDiary_GetTrainingsOfCourseType([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> courseTypeID)
		{
			return this.CreateMethodCallQuery<dcereports_Fn_TutorDiary_GetTrainingsOfCourseTypeResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), courseTypeID);
		}
		
		[Function(Name="dbo.dcereports_Tests_GetMaxTestResultDate", IsComposable=true)]
		public System.Nullable<System.DateTime> dcereports_Tests_GetMaxTestResultDate([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> courseID)
		{
			return ((System.Nullable<System.DateTime>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), courseID).ReturnValue));
		}
		
		[Function(Name="dbo.dcereports_Tests_GetStudentMaxTestResultDate", IsComposable=true)]
		public System.Nullable<System.DateTime> dcereports_Tests_GetStudentMaxTestResultDate([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> courseID, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> studentID)
		{
			return ((System.Nullable<System.DateTime>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), courseID, studentID).ReturnValue));
		}
		
		[Function(Name="dbo.dcereports_Tests_GetTestResultCount", IsComposable=true)]
		public System.Nullable<int> dcereports_Tests_GetTestResultCount([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> courseID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), courseID).ReturnValue));
		}
		
		[Function(Name="dbo.dcereports_Tests_GetTestResultPassedCount", IsComposable=true)]
		public System.Nullable<int> dcereports_Tests_GetTestResultPassedCount([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> courseID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), courseID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Access_FindUsersByAny", IsComposable=true)]
		public IQueryable<dcetools_Fn_Access_FindUsersByAnyResult> dcetools_Fn_Access_FindUsersByAny([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> homeRegion, [Parameter(DbType="NVarChar(255)")] string searchString)
		{
			return this.CreateMethodCallQuery<dcetools_Fn_Access_FindUsersByAnyResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), homeRegion, searchString);
		}
		
		[Function(Name="dbo.dcetools_Fn_Content_GetImage", IsComposable=true)]
		public System.Data.Linq.Binary dcetools_Fn_Content_GetImage([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> contentID)
		{
			return ((System.Data.Linq.Binary)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), contentID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Content_GetString", IsComposable=true)]
		public string dcetools_Fn_Content_GetString([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> contentID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), contentID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Content_GetText", IsComposable=true)]
		public string dcetools_Fn_Content_GetText([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> contentID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), contentID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_CourseDomains_GetDomainParent", IsComposable=true)]
		public System.Nullable<System.Guid> dcetools_Fn_CourseDomains_GetDomainParent([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> domainID)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), domainID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_CourseDomains_IsDomainChildAnyDeep", IsComposable=true)]
		public System.Nullable<bool> dcetools_Fn_CourseDomains_IsDomainChildAnyDeep([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> domainID, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> parentCheckID)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), domainID, parentCheckID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Courses_GetCourseName", IsComposable=true)]
		public string dcetools_Fn_Courses_GetCourseName([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> courseID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), courseID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Courses_GetTestIdList", IsComposable=true)]
		public IQueryable<dcetools_Fn_Courses_GetTestIdListResult> dcetools_Fn_Courses_GetTestIdList([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> courseID)
		{
			return this.CreateMethodCallQuery<dcetools_Fn_Courses_GetTestIdListResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), courseID);
		}
		
		[Function(Name="dbo.dcetools_Fn_Courses_GetTestResultIdList", IsComposable=true)]
		public IQueryable<dcetools_Fn_Courses_GetTestResultIdListResult> dcetools_Fn_Courses_GetTestResultIdList([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> courseID)
		{
			return this.CreateMethodCallQuery<dcetools_Fn_Courses_GetTestResultIdListResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), courseID);
		}
		
		[Function(Name="dbo.dcetools_Fn_Courses_Themes_GetCourseThemeIDList", IsComposable=true)]
		public IQueryable<dcetools_Fn_Courses_Themes_GetCourseThemeIDListResult> dcetools_Fn_Courses_Themes_GetCourseThemeIDList([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> courseID)
		{
			return this.CreateMethodCallQuery<dcetools_Fn_Courses_Themes_GetCourseThemeIDListResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), courseID);
		}
		
		[Function(Name="dbo.dcetools_Fn_Courses_Themes_GetCourseThemes", IsComposable=true)]
		public IQueryable<dcetools_Fn_Courses_Themes_GetCourseThemesResult> dcetools_Fn_Courses_Themes_GetCourseThemes([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> courseID)
		{
			return this.CreateMethodCallQuery<dcetools_Fn_Courses_Themes_GetCourseThemesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), courseID);
		}
		
		[Function(Name="dbo.dcetools_Fn_Orders_GetBestTrainingDate", IsComposable=true)]
		public string dcetools_Fn_Orders_GetBestTrainingDate([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> homeRegion, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> orderID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), homeRegion, orderID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Orders_GetCourseAvailableTrainingsWithDates", IsComposable=true)]
		public IQueryable<dcetools_Fn_Orders_GetCourseAvailableTrainingsWithDatesResult> dcetools_Fn_Orders_GetCourseAvailableTrainingsWithDates([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> homeRegion, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> courseID)
		{
			return this.CreateMethodCallQuery<dcetools_Fn_Orders_GetCourseAvailableTrainingsWithDatesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), homeRegion, courseID);
		}
		
		[Function(Name="dbo.dcetools_Fn_Orders_GetCourseID", IsComposable=true)]
		public System.Nullable<System.Guid> dcetools_Fn_Orders_GetCourseID([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> orderID)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), orderID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Orders_GetStudentID", IsComposable=true)]
		public System.Nullable<System.Guid> dcetools_Fn_Orders_GetStudentID([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> orderID)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), orderID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Regions_GetIdList", IsComposable=true)]
		public IQueryable<dcetools_Fn_Regions_GetIdListResult> dcetools_Fn_Regions_GetIdList()
		{
			return this.CreateMethodCallQuery<dcetools_Fn_Regions_GetIdListResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.dcetools_Fn_Regions_GetIdNameList", IsComposable=true)]
		public IQueryable<dcetools_Fn_Regions_GetIdNameListResult> dcetools_Fn_Regions_GetIdNameList()
		{
			return this.CreateMethodCallQuery<dcetools_Fn_Regions_GetIdNameListResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.dcetools_Fn_Regions_GetName", IsComposable=true)]
		public string dcetools_Fn_Regions_GetName([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> regionID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), regionID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Regions_GetObjectRegionID", IsComposable=true)]
		public System.Nullable<System.Guid> dcetools_Fn_Regions_GetObjectRegionID([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> objectID)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), objectID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Regions_GetObjectRegionName", IsComposable=true)]
		public string dcetools_Fn_Regions_GetObjectRegionName([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> objectID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), objectID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Regions_ObjectCanReadByHome", IsComposable=true)]
		public System.Nullable<bool> dcetools_Fn_Regions_ObjectCanReadByHome([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> objectID, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> homeRegion)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), objectID, homeRegion).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Regions_ObjectCanWriteByHome", IsComposable=true)]
		public System.Nullable<bool> dcetools_Fn_Regions_ObjectCanWriteByHome([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> objectID, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> homeRegion)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), objectID, homeRegion).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Regions_RegionCanReadByHome", IsComposable=true)]
		public System.Nullable<bool> dcetools_Fn_Regions_RegionCanReadByHome([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> regionID, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> homeRegion)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), regionID, homeRegion).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Regions_RegionCanWriteByHome", IsComposable=true)]
		public System.Nullable<bool> dcetools_Fn_Regions_RegionCanWriteByHome([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> regionID, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> homeRegion)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), regionID, homeRegion).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Students_GetStudentFullName", IsComposable=true)]
		public string dcetools_Fn_Students_GetStudentFullName([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> studentID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), studentID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Themes_GetThemeName", IsComposable=true)]
		public string dcetools_Fn_Themes_GetThemeName([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> themeID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), themeID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Themes_GetThemeParent", IsComposable=true)]
		public System.Nullable<System.Guid> dcetools_Fn_Themes_GetThemeParent([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> themeID)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), themeID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Themes_IsThemeChildAnyDeep", IsComposable=true)]
		public System.Nullable<bool> dcetools_Fn_Themes_IsThemeChildAnyDeep([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> themeID, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> parentCheckID)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), themeID, parentCheckID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Trainings_Forum_GetTopicLastPostDate", IsComposable=true)]
		public System.Nullable<System.DateTime> dcetools_Fn_Trainings_Forum_GetTopicLastPostDate([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> topicID)
		{
			return ((System.Nullable<System.DateTime>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), topicID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Trainings_Forum_GetTopicMessageCount", IsComposable=true)]
		public System.Nullable<int> dcetools_Fn_Trainings_Forum_GetTopicMessageCount([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> topicID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), topicID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Trainings_GetCourseID", IsComposable=true)]
		public System.Nullable<System.Guid> dcetools_Fn_Trainings_GetCourseID([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trainingID)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), trainingID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Trainings_GetTrainingName", IsComposable=true)]
		public IQueryable<dcetools_Fn_Trainings_GetTrainingNameResult> dcetools_Fn_Trainings_GetTrainingName([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trainingID)
		{
			return this.CreateMethodCallQuery<dcetools_Fn_Trainings_GetTrainingNameResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), trainingID);
		}
		
		[Function(Name="dbo.dcetools_Fn_Trainings_Schedule_GetTrainingScheduleIDList", IsComposable=true)]
		public IQueryable<dcetools_Fn_Trainings_Schedule_GetTrainingScheduleIDListResult> dcetools_Fn_Trainings_Schedule_GetTrainingScheduleIDList([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trainingID)
		{
			return this.CreateMethodCallQuery<dcetools_Fn_Trainings_Schedule_GetTrainingScheduleIDListResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), trainingID);
		}
		
		[Function(Name="dbo.dcetools_Fn_Trainings_Schedule_GetTrainingThemeScheduleID", IsComposable=true)]
		public System.Nullable<System.Guid> dcetools_Fn_Trainings_Schedule_GetTrainingThemeScheduleID([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trainingID, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> themeID)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), trainingID, themeID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Trainings_Students_GetIDList", IsComposable=true)]
		public IQueryable<dcetools_Fn_Trainings_Students_GetIDListResult> dcetools_Fn_Trainings_Students_GetIDList([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trainingID)
		{
			return this.CreateMethodCallQuery<dcetools_Fn_Trainings_Students_GetIDListResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), trainingID);
		}
		
		[Function(Name="dbo.dcetools_Fn_Trainings_Students_GetStudentTrainingIDList", IsComposable=true)]
		public IQueryable<dcetools_Fn_Trainings_Students_GetStudentTrainingIDListResult> dcetools_Fn_Trainings_Students_GetStudentTrainingIDList([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> studentID)
		{
			return this.CreateMethodCallQuery<dcetools_Fn_Trainings_Students_GetStudentTrainingIDListResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), studentID);
		}
		
		[Function(Name="dbo.dcetools_Fn_Trainings_Students_GetTrainingStudentCount", IsComposable=true)]
		public System.Nullable<int> dcetools_Fn_Trainings_Students_GetTrainingStudentCount([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trainingID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), trainingID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Trainings_Students_IsTrainingContainsStudent", IsComposable=true)]
		public System.Nullable<bool> dcetools_Fn_Trainings_Students_IsTrainingContainsStudent([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trainingID, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> studentID)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), trainingID, studentID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Users_GetStudentOrUserFullName", IsComposable=true)]
		public string dcetools_Fn_Users_GetStudentOrUserFullName([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> userID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Users_GetUserFullName", IsComposable=true)]
		public string dcetools_Fn_Users_GetUserFullName([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> userID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID).ReturnValue));
		}
		
		[Function(Name="dbo.dcetools_Fn_Util_CombineFullName", IsComposable=true)]
		public string dcetools_Fn_Util_CombineFullName([Parameter(DbType="NVarChar(255)")] string firstName, [Parameter(DbType="NVarChar(255)")] string patronymicName, [Parameter(DbType="NVarChar(255)")] string lastName)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firstName, patronymicName, lastName).ReturnValue));
		}
		
		[Function(Name="dbo.GetContentAlt", IsComposable=true)]
		public string GetContentAlt([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(DbType="NChar(3)")] string lang, [Parameter(DbType="NChar(3)")] string deflang)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, lang, deflang).ReturnValue));
		}
		
		[Function(Name="dbo.GetMaxCOrder", IsComposable=true)]
		public System.Nullable<int> GetMaxCOrder()
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[Function(Name="dbo.GetStrContentAlt", IsComposable=true)]
		public string GetStrContentAlt([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(DbType="NChar(3)")] string lang, [Parameter(DbType="NChar(3)")] string deflang)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, lang, deflang).ReturnValue));
		}
		
		[Function(Name="dbo.GetStrContentOrderer", IsComposable=true)]
		public string GetStrContentOrderer([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(DbType="Int")] System.Nullable<int> lang, [Parameter(DbType="Int")] System.Nullable<int> order)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, lang, order).ReturnValue));
		}
		
		[Function(Name="dbo.GetTContentId", IsComposable=true)]
		public System.Nullable<System.Guid> GetTContentId([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(DbType="NChar(3)")] string lang, [Parameter(DbType="NChar(3)")] string deflang)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, lang, deflang).ReturnValue));
		}
		
		[Function(Name="dbo.GetTDataContentAlt", IsComposable=true)]
		public string GetTDataContentAlt([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(DbType="NChar(3)")] string lang, [Parameter(DbType="NChar(3)")] string deflang)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, lang, deflang).ReturnValue));
		}
		
		[Function(Name="dbo.GetTestCourse", IsComposable=true)]
		public System.Nullable<System.Guid> GetTestCourse([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id).ReturnValue));
		}
		
		[Function(Name="dbo.GetTestCourseName", IsComposable=true)]
		public string GetTestCourseName([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(DbType="Int")] System.Nullable<int> lang)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, lang).ReturnValue));
		}
		
		[Function(Name="dbo.GetThemeName", IsComposable=true)]
		public string GetThemeName([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(DbType="Int")] System.Nullable<int> lang)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, lang).ReturnValue));
		}
		
		[Function(Name="dbo.GetUserRole", IsComposable=true)]
		public System.Nullable<int> GetUserRole([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> userId, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trId)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, trId).ReturnValue));
		}
		
		[Function(Name="dbo.IdIsNotNull", IsComposable=true)]
		public System.Nullable<bool> IdIsNotNull([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id).ReturnValue));
		}
		
		[Function(Name="dbo.isAreaHasCourses", IsComposable=true)]
		public System.Nullable<bool> isAreaHasCourses([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id).ReturnValue));
		}
		
		[Function(Name="dbo.IsChildTheme", IsComposable=true)]
		public System.Nullable<bool> IsChildTheme([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> parent, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> child)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), parent, child).ReturnValue));
		}
		
		[Function(Name="dbo.isCourseOfArea", IsComposable=true)]
		public System.Nullable<bool> isCourseOfArea([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> cid, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> areaid)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cid, areaid).ReturnValue));
		}
		
		[Function(Name="dbo.IsCourseTestComplete", IsComposable=true)]
		public System.Nullable<int> IsCourseTestComplete([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trainingId, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> studentid)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), trainingId, studentid).ReturnValue));
		}
		
		[Function(Name="dbo.IsEmptyString", IsComposable=true)]
		public string IsEmptyString([Parameter(DbType="NVarChar(1024)")] string sourceStr, [Parameter(DbType="NVarChar(1024)")] string defStr)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sourceStr, defStr).ReturnValue));
		}
		
		[Function(Name="dbo.isIdEqual", IsComposable=true)]
		public System.Nullable<bool> isIdEqual([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> one, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> two)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), one, two).ReturnValue));
		}
		
		[Function(Name="dbo.IsTestMandatory", IsComposable=true)]
		public System.Nullable<bool> IsTestMandatory([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trid)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, trid).ReturnValue));
		}
		
		[Function(Name="dbo.NumReplies", IsComposable=true)]
		public System.Nullable<int> NumReplies([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> topic)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), topic).ReturnValue));
		}
		
		[Function(Name="dbo.StudentName", IsComposable=true)]
		public string StudentName([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(DbType="Bit")] System.Nullable<bool> eng)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, eng).ReturnValue));
		}
		
		[Function(Name="dbo.TargetLang", IsComposable=true)]
		public string TargetLang([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(DbType="NChar(3)")] string lang, [Parameter(DbType="NChar(3)")] string deflang)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, lang, deflang).ReturnValue));
		}
		
		[Function(Name="dbo.TestPoints", IsComposable=true)]
		public System.Nullable<int> TestPoints([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id).ReturnValue));
		}
		
		[Function(Name="dbo.TestResultPoints", IsComposable=true)]
		public System.Nullable<int> TestResultPoints([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id).ReturnValue));
		}
		
		[Function(Name="dbo.TopicAuthor", IsComposable=true)]
		public string TopicAuthor([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id).ReturnValue));
		}
		
		[Function(Name="dbo.TrainingTests", IsComposable=true)]
		public IQueryable<TrainingTestsResult> TrainingTests([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			return this.CreateMethodCallQuery<TrainingTestsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		}
		
		[Function(Name="dbo.TrainingTests_TrainingsFromTest", IsComposable=true)]
		public IQueryable<TrainingTests_TrainingsFromTestResult> TrainingTests_TrainingsFromTest([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> testID)
		{
			return this.CreateMethodCallQuery<TrainingTests_TrainingsFromTestResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), testID);
		}
		
		[Function(Name="dbo.CreateTraining")]
		public int CreateTraining([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trainingID, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> trainingRegion, [Parameter(DbType="NVarChar(250)")] string code, [Parameter(DbType="NVarChar(250)")] string name, [Parameter(DbType="NVarChar(250)")] string comment, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> courseID, [Parameter(DbType="Bit")] System.Nullable<bool> isPublic, [Parameter(DbType="Bit")] System.Nullable<bool> isActive, [Parameter(DbType="Bit")] System.Nullable<bool> timeStrict, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> startDate, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> endDate, [Parameter(DbType="Bit")] System.Nullable<bool> testOnly, [Parameter(DbType="Bit")] System.Nullable<bool> expires)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), trainingID, trainingRegion, code, name, comment, courseID, isPublic, isActive, timeStrict, startDate, endDate, testOnly, expires);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.BulletinBoard")]
	public partial class BulletinBoard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _Author;
		
		private System.DateTime _PostDate;
		
		private System.Guid _Message;
		
		private System.Guid _Training;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnAuthorChanging(System.Guid value);
    partial void OnAuthorChanged();
    partial void OnPostDateChanging(System.DateTime value);
    partial void OnPostDateChanged();
    partial void OnMessageChanging(System.Guid value);
    partial void OnMessageChanged();
    partial void OnTrainingChanging(System.Guid value);
    partial void OnTrainingChanged();
    #endregion
		
		public BulletinBoard()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_PostDate", DbType="DateTime NOT NULL")]
		public System.DateTime PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_Training", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Training
		{
			get
			{
				return this._Training;
			}
			set
			{
				if ((this._Training != value))
				{
					this.OnTrainingChanging(value);
					this.SendPropertyChanging();
					this._Training = value;
					this.SendPropertyChanged("Training");
					this.OnTrainingChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CDPath")]
	public partial class CDPath : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _studentId;
		
		private System.Guid _trainingId;
		
		private string _cdPath1;
		
		private bool _useCDLib;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Training> _Training;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnstudentIdChanging(System.Guid value);
    partial void OnstudentIdChanged();
    partial void OntrainingIdChanging(System.Guid value);
    partial void OntrainingIdChanged();
    partial void OncdPath1Changing(string value);
    partial void OncdPath1Changed();
    partial void OnuseCDLibChanging(bool value);
    partial void OnuseCDLibChanged();
    #endregion
		
		public CDPath()
		{
			this._Student = default(EntityRef<Student>);
			this._Training = default(EntityRef<Training>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_studentId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid studentId
		{
			get
			{
				return this._studentId;
			}
			set
			{
				if ((this._studentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentIdChanging(value);
					this.SendPropertyChanging();
					this._studentId = value;
					this.SendPropertyChanged("studentId");
					this.OnstudentIdChanged();
				}
			}
		}
		
		[Column(Storage="_trainingId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid trainingId
		{
			get
			{
				return this._trainingId;
			}
			set
			{
				if ((this._trainingId != value))
				{
					if (this._Training.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntrainingIdChanging(value);
					this.SendPropertyChanging();
					this._trainingId = value;
					this.SendPropertyChanged("trainingId");
					this.OntrainingIdChanged();
				}
			}
		}
		
		[Column(Name="cdPath", Storage="_cdPath1", DbType="NVarChar(120)")]
		public string cdPath1
		{
			get
			{
				return this._cdPath1;
			}
			set
			{
				if ((this._cdPath1 != value))
				{
					this.OncdPath1Changing(value);
					this.SendPropertyChanging();
					this._cdPath1 = value;
					this.SendPropertyChanged("cdPath1");
					this.OncdPath1Changed();
				}
			}
		}
		
		[Column(Storage="_useCDLib", DbType="Bit NOT NULL")]
		public bool useCDLib
		{
			get
			{
				return this._useCDLib;
			}
			set
			{
				if ((this._useCDLib != value))
				{
					this.OnuseCDLibChanging(value);
					this.SendPropertyChanging();
					this._useCDLib = value;
					this.SendPropertyChanged("useCDLib");
					this.OnuseCDLibChanged();
				}
			}
		}
		
		[Association(Name="Student_CDPath", Storage="_Student", ThisKey="studentId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.CDPaths.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.CDPaths.Add(this);
						this._studentId = value.id;
					}
					else
					{
						this._studentId = default(System.Guid);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[Association(Name="Training_CDPath", Storage="_Training", ThisKey="trainingId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Training Training
		{
			get
			{
				return this._Training.Entity;
			}
			set
			{
				Training previousValue = this._Training.Entity;
				if (((previousValue != value) 
							|| (this._Training.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Training.Entity = null;
						previousValue.CDPaths.Remove(this);
					}
					this._Training.Entity = value;
					if ((value != null))
					{
						value.CDPaths.Add(this);
						this._trainingId = value.id;
					}
					else
					{
						this._trainingId = default(System.Guid);
					}
					this.SendPropertyChanged("Training");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Content")]
	public partial class Content : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _eid;
		
		private int _Type;
		
		private System.Nullable<int> _Lang;
		
		private string _DataStr;
		
		private System.Data.Linq.Binary _Data;
		
		private string _TData;
		
		private System.Nullable<System.Guid> _ParentEid;
		
		private System.Nullable<int> _COrder;
		
		private EntityRef<Course> _CourseAdditions;
		
		private EntityRef<Course> _CourseAuthor;
		
		private EntityRef<Course> _CourseDescriptionLong;
		
		private EntityRef<Course> _CourseDescriptionShort;
		
		private EntityRef<Course> _CourseKeywords;
		
		private EntityRef<Course> _CourseName;
		
		private EntityRef<Course> _Courserequirements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OneidChanging(System.Guid value);
    partial void OneidChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnLangChanging(System.Nullable<int> value);
    partial void OnLangChanged();
    partial void OnDataStrChanging(string value);
    partial void OnDataStrChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    partial void OnTDataChanging(string value);
    partial void OnTDataChanged();
    partial void OnParentEidChanging(System.Nullable<System.Guid> value);
    partial void OnParentEidChanged();
    partial void OnCOrderChanging(System.Nullable<int> value);
    partial void OnCOrderChanged();
    #endregion
		
		public Content()
		{
			this._CourseAdditions = default(EntityRef<Course>);
			this._CourseAuthor = default(EntityRef<Course>);
			this._CourseDescriptionLong = default(EntityRef<Course>);
			this._CourseDescriptionShort = default(EntityRef<Course>);
			this._CourseKeywords = default(EntityRef<Course>);
			this._CourseName = default(EntityRef<Course>);
			this._Courserequirements = default(EntityRef<Course>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_eid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid eid
		{
			get
			{
				return this._eid;
			}
			set
			{
				if ((this._eid != value))
				{
					if (this._CourseAdditions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneidChanging(value);
					this.SendPropertyChanging();
					this._eid = value;
					this.SendPropertyChanged("eid");
					this.OneidChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Lang", DbType="Int")]
		public System.Nullable<int> Lang
		{
			get
			{
				return this._Lang;
			}
			set
			{
				if ((this._Lang != value))
				{
					if (this._CourseAdditions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLangChanging(value);
					this.SendPropertyChanging();
					this._Lang = value;
					this.SendPropertyChanged("Lang");
					this.OnLangChanged();
				}
			}
		}
		
		[Column(Storage="_DataStr", DbType="NVarChar(255)")]
		public string DataStr
		{
			get
			{
				return this._DataStr;
			}
			set
			{
				if ((this._DataStr != value))
				{
					this.OnDataStrChanging(value);
					this.SendPropertyChanging();
					this._DataStr = value;
					this.SendPropertyChanged("DataStr");
					this.OnDataStrChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Column(Storage="_TData", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string TData
		{
			get
			{
				return this._TData;
			}
			set
			{
				if ((this._TData != value))
				{
					this.OnTDataChanging(value);
					this.SendPropertyChanging();
					this._TData = value;
					this.SendPropertyChanged("TData");
					this.OnTDataChanged();
				}
			}
		}
		
		[Column(Storage="_ParentEid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentEid
		{
			get
			{
				return this._ParentEid;
			}
			set
			{
				if ((this._ParentEid != value))
				{
					this.OnParentEidChanging(value);
					this.SendPropertyChanging();
					this._ParentEid = value;
					this.SendPropertyChanged("ParentEid");
					this.OnParentEidChanged();
				}
			}
		}
		
		[Column(Storage="_COrder", DbType="Int")]
		public System.Nullable<int> COrder
		{
			get
			{
				return this._COrder;
			}
			set
			{
				if ((this._COrder != value))
				{
					this.OnCOrderChanging(value);
					this.SendPropertyChanging();
					this._COrder = value;
					this.SendPropertyChanged("COrder");
					this.OnCOrderChanged();
				}
			}
		}
		
		[Association(Name="Course_Content", Storage="_CourseAdditions", ThisKey="eid,Lang", OtherKey="Additions,CourseLanguage", IsForeignKey=true)]
		public Course CourseAdditions
		{
			get
			{
				return this._CourseAdditions.Entity;
			}
			set
			{
				Course previousValue = this._CourseAdditions.Entity;
				if (((previousValue != value) 
							|| (this._CourseAdditions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseAdditions.Entity = null;
						previousValue.AdditionsContents.Remove(this);
					}
					this._CourseAdditions.Entity = value;
					if ((value != null))
					{
						value.AdditionsContents.Add(this);
						this._eid = value.Additions;
						this._Lang = value.CourseLanguage;
					}
					else
					{
						this._eid = default(System.Guid);
						this._Lang = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourseAdditions");
				}
			}
		}
		
		[Association(Name="Course_Content1", Storage="_CourseAuthor", ThisKey="eid,Lang", OtherKey="Author,CourseLanguage", IsForeignKey=true)]
		public Course CourseAuthor
		{
			get
			{
				return this._CourseAuthor.Entity;
			}
			set
			{
				Course previousValue = this._CourseAuthor.Entity;
				if (((previousValue != value) 
							|| (this._CourseAuthor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseAuthor.Entity = null;
						previousValue.AuthorContents.Remove(this);
					}
					this._CourseAuthor.Entity = value;
					if ((value != null))
					{
						value.AuthorContents.Add(this);
						this._eid = value.Author;
						this._Lang = value.CourseLanguage;
					}
					else
					{
						this._eid = default(System.Guid);
						this._Lang = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourseAuthor");
				}
			}
		}
		
		[Association(Name="Course_Content2", Storage="_CourseDescriptionLong", ThisKey="eid", OtherKey="DescriptionLong", IsForeignKey=true)]
		public Course CourseDescriptionLong
		{
			get
			{
				return this._CourseDescriptionLong.Entity;
			}
			set
			{
				Course previousValue = this._CourseDescriptionLong.Entity;
				if (((previousValue != value) 
							|| (this._CourseDescriptionLong.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseDescriptionLong.Entity = null;
						previousValue.DescriptionLongContents.Remove(this);
					}
					this._CourseDescriptionLong.Entity = value;
					if ((value != null))
					{
						value.DescriptionLongContents.Add(this);
						this._eid = value.DescriptionLong;
					}
					else
					{
						this._eid = default(System.Guid);
					}
					this.SendPropertyChanged("CourseDescriptionLong");
				}
			}
		}
		
		[Association(Name="Course_Content3", Storage="_CourseDescriptionShort", ThisKey="eid", OtherKey="DescriptionShort", IsForeignKey=true)]
		public Course CourseDescriptionShort
		{
			get
			{
				return this._CourseDescriptionShort.Entity;
			}
			set
			{
				Course previousValue = this._CourseDescriptionShort.Entity;
				if (((previousValue != value) 
							|| (this._CourseDescriptionShort.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseDescriptionShort.Entity = null;
						previousValue.DescriptionShortContents.Remove(this);
					}
					this._CourseDescriptionShort.Entity = value;
					if ((value != null))
					{
						value.DescriptionShortContents.Add(this);
						this._eid = value.DescriptionShort;
					}
					else
					{
						this._eid = default(System.Guid);
					}
					this.SendPropertyChanged("CourseDescriptionShort");
				}
			}
		}
		
		[Association(Name="Course_Content4", Storage="_CourseKeywords", ThisKey="eid,Lang", OtherKey="Keywords,CourseLanguage", IsForeignKey=true)]
		public Course CourseKeywords
		{
			get
			{
				return this._CourseKeywords.Entity;
			}
			set
			{
				Course previousValue = this._CourseKeywords.Entity;
				if (((previousValue != value) 
							|| (this._CourseKeywords.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseKeywords.Entity = null;
						previousValue.KeywordsContents.Remove(this);
					}
					this._CourseKeywords.Entity = value;
					if ((value != null))
					{
						value.KeywordsContents.Add(this);
						this._eid = value.Keywords;
						this._Lang = value.CourseLanguage;
					}
					else
					{
						this._eid = default(System.Guid);
						this._Lang = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourseKeywords");
				}
			}
		}
		
		[Association(Name="Course_Content5", Storage="_CourseName", ThisKey="eid", OtherKey="Name", IsForeignKey=true)]
		public Course CourseName
		{
			get
			{
				return this._CourseName.Entity;
			}
			set
			{
				Course previousValue = this._CourseName.Entity;
				if (((previousValue != value) 
							|| (this._CourseName.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseName.Entity = null;
						previousValue.NameContents.Remove(this);
					}
					this._CourseName.Entity = value;
					if ((value != null))
					{
						value.NameContents.Add(this);
						this._eid = value.Name;
					}
					else
					{
						this._eid = default(System.Guid);
					}
					this.SendPropertyChanged("CourseName");
				}
			}
		}
		
		[Association(Name="Course_Content6", Storage="_Courserequirements", ThisKey="eid,Lang", OtherKey="Requirements,CourseLanguage", IsForeignKey=true)]
		public Course Courserequirements
		{
			get
			{
				return this._Courserequirements.Entity;
			}
			set
			{
				Course previousValue = this._Courserequirements.Entity;
				if (((previousValue != value) 
							|| (this._Courserequirements.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Courserequirements.Entity = null;
						previousValue.RequirementsContents.Remove(this);
					}
					this._Courserequirements.Entity = value;
					if ((value != null))
					{
						value.RequirementsContents.Add(this);
						this._eid = value.Requirements;
						this._Lang = value.CourseLanguage;
					}
					else
					{
						this._eid = default(System.Guid);
						this._Lang = default(Nullable<int>);
					}
					this.SendPropertyChanged("Courserequirements");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CourseDomain")]
	public partial class CourseDomain
	{
		
		private System.Guid _id;
		
		private System.Nullable<System.Guid> _Parent;
		
		private System.Guid _Name;
		
		public CourseDomain()
		{
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_Parent", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Parent
		{
			get
			{
				return this._Parent;
			}
			set
			{
				if ((this._Parent != value))
				{
					this._Parent = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.CourseRequest")]
	public partial class CourseRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id = default(System.Guid);
		
		private System.Guid _Student;
		
		private System.Guid _Course;
		
		private System.DateTime _RequestDate;
		
		private System.DateTime _StartDate;
		
		private string _Comments;
		
		private EntityRef<Course> _Course1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentChanging(System.Guid value);
    partial void OnStudentChanged();
    partial void OnCourseChanging(System.Guid value);
    partial void OnCourseChanged();
    partial void OnRequestDateChanging(System.DateTime value);
    partial void OnRequestDateChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public CourseRequest()
		{
			this._Course1 = default(EntityRef<Course>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
		}
		
		[Column(Storage="_Student", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Student
		{
			get
			{
				return this._Student;
			}
			set
			{
				if ((this._Student != value))
				{
					this.OnStudentChanging(value);
					this.SendPropertyChanging();
					this._Student = value;
					this.SendPropertyChanged("Student");
					this.OnStudentChanged();
				}
			}
		}
		
		[Column(Storage="_Course", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Course
		{
			get
			{
				return this._Course;
			}
			set
			{
				if ((this._Course != value))
				{
					if (this._Course1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseChanging(value);
					this.SendPropertyChanging();
					this._Course = value;
					this.SendPropertyChanged("Course");
					this.OnCourseChanged();
				}
			}
		}
		
		[Column(Storage="_RequestDate", DbType="DateTime NOT NULL")]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(255)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Association(Name="Course_CourseRequest", Storage="_Course1", ThisKey="Course", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Course Course1
		{
			get
			{
				return this._Course1.Entity;
			}
			set
			{
				Course previousValue = this._Course1.Entity;
				if (((previousValue != value) 
							|| (this._Course1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course1.Entity = null;
						previousValue.CourseRequests.Remove(this);
					}
					this._Course1.Entity = value;
					if ((value != null))
					{
						value.CourseRequests.Add(this);
						this._Course = value.id;
					}
					else
					{
						this._Course = default(System.Guid);
					}
					this.SendPropertyChanged("Course1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id = default(System.Guid);
		
		private string _Version;
		
		private string _Code;
		
		private System.Guid _Name;
		
		private System.Nullable<System.Guid> _Area;
		
		private System.Nullable<System.Guid> _Type;
		
		private double _Cost1;
		
		private System.Nullable<System.Guid> _CostType1;
		
		private double _Cost2;
		
		private System.Nullable<System.Guid> _CostType2;
		
		private System.Guid _Author;
		
		private bool _CPublic;
		
		private System.Guid _DescriptionShort;
		
		private System.Guid _DescriptionLong;
		
		private System.Guid _Requirements;
		
		private System.Guid _Keywords;
		
		private System.Guid _Additions;
		
		private System.Guid _Instructors;
		
		private System.Nullable<System.Guid> _StartQuestionnaire;
		
		private System.Nullable<System.Guid> _FinishQuestionnaire;
		
		private string _DiskFolder;
		
		private bool _isReady;
		
		private int _CourseLanguage;
		
		private EntitySet<Content> _AdditionsContents;
		
		private EntitySet<Content> _AuthorContents;
		
		private EntitySet<Content> _DescriptionLongContents;
		
		private EntitySet<Content> _DescriptionShortContents;
		
		private EntitySet<Content> _KeywordsContents;
		
		private EntitySet<Content> _NameContents;
		
		private EntitySet<Content> _RequirementsContents;
		
		private EntitySet<CourseRequest> _CourseRequests;
		
		private EntitySet<Training> _Trainings;
		
		private EntitySet<Vocabulary> _Vocabularies;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Test> _Test;
		
		private EntityRef<Test> _Test1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(System.Guid value);
    partial void OnNameChanged();
    partial void OnAreaChanging(System.Nullable<System.Guid> value);
    partial void OnAreaChanged();
    partial void OnTypeChanging(System.Nullable<System.Guid> value);
    partial void OnTypeChanged();
    partial void OnCost1Changing(double value);
    partial void OnCost1Changed();
    partial void OnCostType1Changing(System.Nullable<System.Guid> value);
    partial void OnCostType1Changed();
    partial void OnCost2Changing(double value);
    partial void OnCost2Changed();
    partial void OnCostType2Changing(System.Nullable<System.Guid> value);
    partial void OnCostType2Changed();
    partial void OnAuthorChanging(System.Guid value);
    partial void OnAuthorChanged();
    partial void OnCPublicChanging(bool value);
    partial void OnCPublicChanged();
    partial void OnDescriptionShortChanging(System.Guid value);
    partial void OnDescriptionShortChanged();
    partial void OnDescriptionLongChanging(System.Guid value);
    partial void OnDescriptionLongChanged();
    partial void OnRequirementsChanging(System.Guid value);
    partial void OnRequirementsChanged();
    partial void OnKeywordsChanging(System.Guid value);
    partial void OnKeywordsChanged();
    partial void OnAdditionsChanging(System.Guid value);
    partial void OnAdditionsChanged();
    partial void OnInstructorsChanging(System.Guid value);
    partial void OnInstructorsChanged();
    partial void OnStartQuestionnaireChanging(System.Nullable<System.Guid> value);
    partial void OnStartQuestionnaireChanged();
    partial void OnFinishQuestionnaireChanging(System.Nullable<System.Guid> value);
    partial void OnFinishQuestionnaireChanged();
    partial void OnDiskFolderChanging(string value);
    partial void OnDiskFolderChanged();
    partial void OnisReadyChanging(bool value);
    partial void OnisReadyChanged();
    partial void OnCourseLanguageChanging(int value);
    partial void OnCourseLanguageChanged();
    #endregion
		
		public Course()
		{
			this._AdditionsContents = new EntitySet<Content>(new Action<Content>(this.attach_AdditionsContents), new Action<Content>(this.detach_AdditionsContents));
			this._AuthorContents = new EntitySet<Content>(new Action<Content>(this.attach_AuthorContents), new Action<Content>(this.detach_AuthorContents));
			this._DescriptionLongContents = new EntitySet<Content>(new Action<Content>(this.attach_DescriptionLongContents), new Action<Content>(this.detach_DescriptionLongContents));
			this._DescriptionShortContents = new EntitySet<Content>(new Action<Content>(this.attach_DescriptionShortContents), new Action<Content>(this.detach_DescriptionShortContents));
			this._KeywordsContents = new EntitySet<Content>(new Action<Content>(this.attach_KeywordsContents), new Action<Content>(this.detach_KeywordsContents));
			this._NameContents = new EntitySet<Content>(new Action<Content>(this.attach_NameContents), new Action<Content>(this.detach_NameContents));
			this._RequirementsContents = new EntitySet<Content>(new Action<Content>(this.attach_RequirementsContents), new Action<Content>(this.detach_RequirementsContents));
			this._CourseRequests = new EntitySet<CourseRequest>(new Action<CourseRequest>(this.attach_CourseRequests), new Action<CourseRequest>(this.detach_CourseRequests));
			this._Trainings = new EntitySet<Training>(new Action<Training>(this.attach_Trainings), new Action<Training>(this.detach_Trainings));
			this._Vocabularies = new EntitySet<Vocabulary>(new Action<Vocabulary>(this.attach_Vocabularies), new Action<Vocabulary>(this.detach_Vocabularies));
			this._Group = default(EntityRef<Group>);
			this._Test = default(EntityRef<Test>);
			this._Test1 = default(EntityRef<Test>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
		}
		
		[Column(Storage="_Version", DbType="NVarChar(2) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Area", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Cost1", DbType="Float NOT NULL")]
		public double Cost1
		{
			get
			{
				return this._Cost1;
			}
			set
			{
				if ((this._Cost1 != value))
				{
					this.OnCost1Changing(value);
					this.SendPropertyChanging();
					this._Cost1 = value;
					this.SendPropertyChanged("Cost1");
					this.OnCost1Changed();
				}
			}
		}
		
		[Column(Storage="_CostType1", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CostType1
		{
			get
			{
				return this._CostType1;
			}
			set
			{
				if ((this._CostType1 != value))
				{
					this.OnCostType1Changing(value);
					this.SendPropertyChanging();
					this._CostType1 = value;
					this.SendPropertyChanged("CostType1");
					this.OnCostType1Changed();
				}
			}
		}
		
		[Column(Storage="_Cost2", DbType="Float NOT NULL")]
		public double Cost2
		{
			get
			{
				return this._Cost2;
			}
			set
			{
				if ((this._Cost2 != value))
				{
					this.OnCost2Changing(value);
					this.SendPropertyChanging();
					this._Cost2 = value;
					this.SendPropertyChanged("Cost2");
					this.OnCost2Changed();
				}
			}
		}
		
		[Column(Storage="_CostType2", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CostType2
		{
			get
			{
				return this._CostType2;
			}
			set
			{
				if ((this._CostType2 != value))
				{
					this.OnCostType2Changing(value);
					this.SendPropertyChanging();
					this._CostType2 = value;
					this.SendPropertyChanged("CostType2");
					this.OnCostType2Changed();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_CPublic", DbType="Bit NOT NULL")]
		public bool CPublic
		{
			get
			{
				return this._CPublic;
			}
			set
			{
				if ((this._CPublic != value))
				{
					this.OnCPublicChanging(value);
					this.SendPropertyChanging();
					this._CPublic = value;
					this.SendPropertyChanged("CPublic");
					this.OnCPublicChanged();
				}
			}
		}
		
		[Column(Storage="_DescriptionShort", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DescriptionShort
		{
			get
			{
				return this._DescriptionShort;
			}
			set
			{
				if ((this._DescriptionShort != value))
				{
					this.OnDescriptionShortChanging(value);
					this.SendPropertyChanging();
					this._DescriptionShort = value;
					this.SendPropertyChanged("DescriptionShort");
					this.OnDescriptionShortChanged();
				}
			}
		}
		
		[Column(Storage="_DescriptionLong", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DescriptionLong
		{
			get
			{
				return this._DescriptionLong;
			}
			set
			{
				if ((this._DescriptionLong != value))
				{
					this.OnDescriptionLongChanging(value);
					this.SendPropertyChanging();
					this._DescriptionLong = value;
					this.SendPropertyChanged("DescriptionLong");
					this.OnDescriptionLongChanged();
				}
			}
		}
		
		[Column(Storage="_Requirements", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Requirements
		{
			get
			{
				return this._Requirements;
			}
			set
			{
				if ((this._Requirements != value))
				{
					this.OnRequirementsChanging(value);
					this.SendPropertyChanging();
					this._Requirements = value;
					this.SendPropertyChanged("Requirements");
					this.OnRequirementsChanged();
				}
			}
		}
		
		[Column(Storage="_Keywords", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		[Column(Storage="_Additions", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Additions
		{
			get
			{
				return this._Additions;
			}
			set
			{
				if ((this._Additions != value))
				{
					this.OnAdditionsChanging(value);
					this.SendPropertyChanging();
					this._Additions = value;
					this.SendPropertyChanged("Additions");
					this.OnAdditionsChanged();
				}
			}
		}
		
		[Column(Storage="_Instructors", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Instructors
		{
			get
			{
				return this._Instructors;
			}
			set
			{
				if ((this._Instructors != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstructorsChanging(value);
					this.SendPropertyChanging();
					this._Instructors = value;
					this.SendPropertyChanged("Instructors");
					this.OnInstructorsChanged();
				}
			}
		}
		
		[Column(Storage="_StartQuestionnaire", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StartQuestionnaire
		{
			get
			{
				return this._StartQuestionnaire;
			}
			set
			{
				if ((this._StartQuestionnaire != value))
				{
					if (this._Test1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStartQuestionnaireChanging(value);
					this.SendPropertyChanging();
					this._StartQuestionnaire = value;
					this.SendPropertyChanged("StartQuestionnaire");
					this.OnStartQuestionnaireChanged();
				}
			}
		}
		
		[Column(Storage="_FinishQuestionnaire", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FinishQuestionnaire
		{
			get
			{
				return this._FinishQuestionnaire;
			}
			set
			{
				if ((this._FinishQuestionnaire != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFinishQuestionnaireChanging(value);
					this.SendPropertyChanging();
					this._FinishQuestionnaire = value;
					this.SendPropertyChanged("FinishQuestionnaire");
					this.OnFinishQuestionnaireChanged();
				}
			}
		}
		
		[Column(Storage="_DiskFolder", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string DiskFolder
		{
			get
			{
				return this._DiskFolder;
			}
			set
			{
				if ((this._DiskFolder != value))
				{
					this.OnDiskFolderChanging(value);
					this.SendPropertyChanging();
					this._DiskFolder = value;
					this.SendPropertyChanged("DiskFolder");
					this.OnDiskFolderChanged();
				}
			}
		}
		
		[Column(Storage="_isReady", DbType="Bit NOT NULL")]
		public bool isReady
		{
			get
			{
				return this._isReady;
			}
			set
			{
				if ((this._isReady != value))
				{
					this.OnisReadyChanging(value);
					this.SendPropertyChanging();
					this._isReady = value;
					this.SendPropertyChanged("isReady");
					this.OnisReadyChanged();
				}
			}
		}
		
		[Column(Storage="_CourseLanguage", DbType="Int NOT NULL")]
		public int CourseLanguage
		{
			get
			{
				return this._CourseLanguage;
			}
			set
			{
				if ((this._CourseLanguage != value))
				{
					this.OnCourseLanguageChanging(value);
					this.SendPropertyChanging();
					this._CourseLanguage = value;
					this.SendPropertyChanged("CourseLanguage");
					this.OnCourseLanguageChanged();
				}
			}
		}
		
		[Association(Name="Course_Content", Storage="_AdditionsContents", ThisKey="Additions,CourseLanguage", OtherKey="eid,Lang")]
		public EntitySet<Content> AdditionsContents
		{
			get
			{
				return this._AdditionsContents;
			}
			set
			{
				this._AdditionsContents.Assign(value);
			}
		}
		
		[Association(Name="Course_Content1", Storage="_AuthorContents", ThisKey="Author,CourseLanguage", OtherKey="eid,Lang")]
		public EntitySet<Content> AuthorContents
		{
			get
			{
				return this._AuthorContents;
			}
			set
			{
				this._AuthorContents.Assign(value);
			}
		}
		
		[Association(Name="Course_Content2", Storage="_DescriptionLongContents", ThisKey="DescriptionLong", OtherKey="eid")]
		public EntitySet<Content> DescriptionLongContents
		{
			get
			{
				return this._DescriptionLongContents;
			}
			set
			{
				this._DescriptionLongContents.Assign(value);
			}
		}
		
		[Association(Name="Course_Content3", Storage="_DescriptionShortContents", ThisKey="DescriptionShort", OtherKey="eid")]
		public EntitySet<Content> DescriptionShortContents
		{
			get
			{
				return this._DescriptionShortContents;
			}
			set
			{
				this._DescriptionShortContents.Assign(value);
			}
		}
		
		[Association(Name="Course_Content4", Storage="_KeywordsContents", ThisKey="Keywords,CourseLanguage", OtherKey="eid,Lang")]
		public EntitySet<Content> KeywordsContents
		{
			get
			{
				return this._KeywordsContents;
			}
			set
			{
				this._KeywordsContents.Assign(value);
			}
		}
		
		[Association(Name="Course_Content5", Storage="_NameContents", ThisKey="Name", OtherKey="eid")]
		public EntitySet<Content> NameContents
		{
			get
			{
				return this._NameContents;
			}
			set
			{
				this._NameContents.Assign(value);
			}
		}
		
		[Association(Name="Course_Content6", Storage="_RequirementsContents", ThisKey="Requirements,CourseLanguage", OtherKey="eid,Lang")]
		public EntitySet<Content> RequirementsContents
		{
			get
			{
				return this._RequirementsContents;
			}
			set
			{
				this._RequirementsContents.Assign(value);
			}
		}
		
		[Association(Name="Course_CourseRequest", Storage="_CourseRequests", ThisKey="id", OtherKey="Course")]
		public EntitySet<CourseRequest> CourseRequests
		{
			get
			{
				return this._CourseRequests;
			}
			set
			{
				this._CourseRequests.Assign(value);
			}
		}
		
		[Association(Name="Course_Training", Storage="_Trainings", ThisKey="id", OtherKey="Course")]
		public EntitySet<Training> Trainings
		{
			get
			{
				return this._Trainings;
			}
			set
			{
				this._Trainings.Assign(value);
			}
		}
		
		[Association(Name="Course_Vocabulary", Storage="_Vocabularies", ThisKey="id", OtherKey="Course")]
		public EntitySet<Vocabulary> Vocabularies
		{
			get
			{
				return this._Vocabularies;
			}
			set
			{
				this._Vocabularies.Assign(value);
			}
		}
		
		[Association(Name="Group_Course", Storage="_Group", ThisKey="Instructors", OtherKey="id", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._Instructors = value.id;
					}
					else
					{
						this._Instructors = default(System.Guid);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[Association(Name="Test_Course", Storage="_Test", ThisKey="FinishQuestionnaire", OtherKey="id", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._FinishQuestionnaire = value.id;
					}
					else
					{
						this._FinishQuestionnaire = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		[Association(Name="Test_Course1", Storage="_Test1", ThisKey="StartQuestionnaire", OtherKey="id", IsForeignKey=true)]
		public Test Test1
		{
			get
			{
				return this._Test1.Entity;
			}
			set
			{
				Test previousValue = this._Test1.Entity;
				if (((previousValue != value) 
							|| (this._Test1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test1.Entity = null;
						previousValue.Courses1.Remove(this);
					}
					this._Test1.Entity = value;
					if ((value != null))
					{
						value.Courses1.Add(this);
						this._StartQuestionnaire = value.id;
					}
					else
					{
						this._StartQuestionnaire = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Test1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdditionsContents(Content entity)
		{
			this.SendPropertyChanging();
			entity.CourseAdditions = this;
		}
		
		private void detach_AdditionsContents(Content entity)
		{
			this.SendPropertyChanging();
			entity.CourseAdditions = null;
		}
		
		private void attach_AuthorContents(Content entity)
		{
			this.SendPropertyChanging();
			entity.CourseAuthor = this;
		}
		
		private void detach_AuthorContents(Content entity)
		{
			this.SendPropertyChanging();
			entity.CourseAuthor = null;
		}
		
		private void attach_DescriptionLongContents(Content entity)
		{
			this.SendPropertyChanging();
			entity.CourseDescriptionLong = this;
		}
		
		private void detach_DescriptionLongContents(Content entity)
		{
			this.SendPropertyChanging();
			entity.CourseDescriptionLong = null;
		}
		
		private void attach_DescriptionShortContents(Content entity)
		{
			this.SendPropertyChanging();
			entity.CourseDescriptionShort = this;
		}
		
		private void detach_DescriptionShortContents(Content entity)
		{
			this.SendPropertyChanging();
			entity.CourseDescriptionShort = null;
		}
		
		private void attach_KeywordsContents(Content entity)
		{
			this.SendPropertyChanging();
			entity.CourseKeywords = this;
		}
		
		private void detach_KeywordsContents(Content entity)
		{
			this.SendPropertyChanging();
			entity.CourseKeywords = null;
		}
		
		private void attach_NameContents(Content entity)
		{
			this.SendPropertyChanging();
			entity.CourseName = this;
		}
		
		private void detach_NameContents(Content entity)
		{
			this.SendPropertyChanging();
			entity.CourseName = null;
		}
		
		private void attach_RequirementsContents(Content entity)
		{
			this.SendPropertyChanging();
			entity.Courserequirements = this;
		}
		
		private void detach_RequirementsContents(Content entity)
		{
			this.SendPropertyChanging();
			entity.Courserequirements = null;
		}
		
		private void attach_CourseRequests(CourseRequest entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = this;
		}
		
		private void detach_CourseRequests(CourseRequest entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = null;
		}
		
		private void attach_Trainings(Training entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = this;
		}
		
		private void detach_Trainings(Training entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = null;
		}
		
		private void attach_Vocabularies(Vocabulary entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = this;
		}
		
		private void detach_Vocabularies(Vocabulary entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = null;
		}
	}
	
	[Table(Name="dbo.CourseType")]
	public partial class CourseType
	{
		
		private System.Guid _id;
		
		private System.Guid _Name;
		
		public CourseType()
		{
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.CTrackRequest")]
	public partial class CTrackRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _Student;
		
		private System.Guid _CTrack;
		
		private System.DateTime _RequestDate;
		
		private System.DateTime _StartDate;
		
		private string _Comments;
		
		private EntityRef<CTrack> _CTrack1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnStudentChanging(System.Guid value);
    partial void OnStudentChanged();
    partial void OnCTrackChanging(System.Guid value);
    partial void OnCTrackChanged();
    partial void OnRequestDateChanging(System.DateTime value);
    partial void OnRequestDateChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public CTrackRequest()
		{
			this._CTrack1 = default(EntityRef<CTrack>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Student", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Student
		{
			get
			{
				return this._Student;
			}
			set
			{
				if ((this._Student != value))
				{
					this.OnStudentChanging(value);
					this.SendPropertyChanging();
					this._Student = value;
					this.SendPropertyChanged("Student");
					this.OnStudentChanged();
				}
			}
		}
		
		[Column(Storage="_CTrack", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CTrack
		{
			get
			{
				return this._CTrack;
			}
			set
			{
				if ((this._CTrack != value))
				{
					if (this._CTrack1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCTrackChanging(value);
					this.SendPropertyChanging();
					this._CTrack = value;
					this.SendPropertyChanged("CTrack");
					this.OnCTrackChanged();
				}
			}
		}
		
		[Column(Storage="_RequestDate", DbType="DateTime NOT NULL")]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(255)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Association(Name="CTrack_CTrackRequest", Storage="_CTrack1", ThisKey="CTrack", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CTrack CTrack1
		{
			get
			{
				return this._CTrack1.Entity;
			}
			set
			{
				CTrack previousValue = this._CTrack1.Entity;
				if (((previousValue != value) 
							|| (this._CTrack1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CTrack1.Entity = null;
						previousValue.CTrackRequests.Remove(this);
					}
					this._CTrack1.Entity = value;
					if ((value != null))
					{
						value.CTrackRequests.Add(this);
						this._CTrack = value.id;
					}
					else
					{
						this._CTrack = default(System.Guid);
					}
					this.SendPropertyChanged("CTrack1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CTracks")]
	public partial class CTrack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _Name;
		
		private System.Guid _Description;
		
		private System.Guid _Courses;
		
		private EntitySet<CTrackRequest> _CTrackRequests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnNameChanging(System.Guid value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(System.Guid value);
    partial void OnDescriptionChanged();
    partial void OnCoursesChanging(System.Guid value);
    partial void OnCoursesChanged();
    #endregion
		
		public CTrack()
		{
			this._CTrackRequests = new EntitySet<CTrackRequest>(new Action<CTrackRequest>(this.attach_CTrackRequests), new Action<CTrackRequest>(this.detach_CTrackRequests));
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Courses", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				if ((this._Courses != value))
				{
					this.OnCoursesChanging(value);
					this.SendPropertyChanging();
					this._Courses = value;
					this.SendPropertyChanged("Courses");
					this.OnCoursesChanged();
				}
			}
		}
		
		[Association(Name="CTrack_CTrackRequest", Storage="_CTrackRequests", ThisKey="id", OtherKey="CTrack")]
		public EntitySet<CTrackRequest> CTrackRequests
		{
			get
			{
				return this._CTrackRequests;
			}
			set
			{
				this._CTrackRequests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CTrackRequests(CTrackRequest entity)
		{
			this.SendPropertyChanging();
			entity.CTrack1 = this;
		}
		
		private void detach_CTrackRequests(CTrackRequest entity)
		{
			this.SendPropertyChanging();
			entity.CTrack1 = null;
		}
	}
	
	[Table(Name="dbo.Currency")]
	public partial class Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnNameChanging(System.Guid value);
    partial void OnNameChanged();
    #endregion
		
		public Currency()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Entities")]
	public partial class Entity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Nullable<System.Guid> _Parent;
		
		private int _Type;
		
		private EntitySet<Right> _Rights;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnParentChanging(System.Nullable<System.Guid> value);
    partial void OnParentChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public Entity()
		{
			this._Rights = new EntitySet<Right>(new Action<Right>(this.attach_Rights), new Action<Right>(this.detach_Rights));
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Parent", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Parent
		{
			get
			{
				return this._Parent;
			}
			set
			{
				if ((this._Parent != value))
				{
					this.OnParentChanging(value);
					this.SendPropertyChanging();
					this._Parent = value;
					this.SendPropertyChanged("Parent");
					this.OnParentChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Association(Name="Entity_Right", Storage="_Rights", ThisKey="id", OtherKey="eid")]
		public EntitySet<Right> Rights
		{
			get
			{
				return this._Rights;
			}
			set
			{
				this._Rights.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rights(Right entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_Rights(Right entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
	}
	
	[Table(Name="dbo.ForumReplies")]
	public partial class ForumReply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _Topic;
		
		private System.Guid _Author;
		
		private string _Message;
		
		private System.DateTime _PostDate;
		
		private EntityRef<ForumTopic> _ForumTopic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnTopicChanging(System.Guid value);
    partial void OnTopicChanged();
    partial void OnAuthorChanging(System.Guid value);
    partial void OnAuthorChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnPostDateChanging(System.DateTime value);
    partial void OnPostDateChanged();
    #endregion
		
		public ForumReply()
		{
			this._ForumTopic = default(EntityRef<ForumTopic>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Topic", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Topic
		{
			get
			{
				return this._Topic;
			}
			set
			{
				if ((this._Topic != value))
				{
					if (this._ForumTopic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicChanging(value);
					this.SendPropertyChanging();
					this._Topic = value;
					this.SendPropertyChanged("Topic");
					this.OnTopicChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_PostDate", DbType="DateTime NOT NULL")]
		public System.DateTime PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[Association(Name="ForumTopic_ForumReply", Storage="_ForumTopic", ThisKey="Topic", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ForumTopic ForumTopic
		{
			get
			{
				return this._ForumTopic.Entity;
			}
			set
			{
				ForumTopic previousValue = this._ForumTopic.Entity;
				if (((previousValue != value) 
							|| (this._ForumTopic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForumTopic.Entity = null;
						previousValue.ForumReplies.Remove(this);
					}
					this._ForumTopic.Entity = value;
					if ((value != null))
					{
						value.ForumReplies.Add(this);
						this._Topic = value.id;
					}
					else
					{
						this._Topic = default(System.Guid);
					}
					this.SendPropertyChanged("ForumTopic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ForumTopics")]
	public partial class ForumTopic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _Training;
		
		private System.Guid _Author;
		
		private System.Nullable<System.Guid> _Student;
		
		private string _Topic;
		
		private string _Message;
		
		private System.DateTime _PostDate;
		
		private System.Nullable<bool> _Blocked;
		
		private EntitySet<ForumReply> _ForumReplies;
		
		private EntityRef<Training> _Training1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnTrainingChanging(System.Guid value);
    partial void OnTrainingChanged();
    partial void OnAuthorChanging(System.Guid value);
    partial void OnAuthorChanged();
    partial void OnStudentChanging(System.Nullable<System.Guid> value);
    partial void OnStudentChanged();
    partial void OnTopicChanging(string value);
    partial void OnTopicChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnPostDateChanging(System.DateTime value);
    partial void OnPostDateChanged();
    partial void OnBlockedChanging(System.Nullable<bool> value);
    partial void OnBlockedChanged();
    #endregion
		
		public ForumTopic()
		{
			this._ForumReplies = new EntitySet<ForumReply>(new Action<ForumReply>(this.attach_ForumReplies), new Action<ForumReply>(this.detach_ForumReplies));
			this._Training1 = default(EntityRef<Training>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Training", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Training
		{
			get
			{
				return this._Training;
			}
			set
			{
				if ((this._Training != value))
				{
					if (this._Training1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingChanging(value);
					this.SendPropertyChanging();
					this._Training = value;
					this.SendPropertyChanged("Training");
					this.OnTrainingChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Student", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Student
		{
			get
			{
				return this._Student;
			}
			set
			{
				if ((this._Student != value))
				{
					this.OnStudentChanging(value);
					this.SendPropertyChanging();
					this._Student = value;
					this.SendPropertyChanged("Student");
					this.OnStudentChanged();
				}
			}
		}
		
		[Column(Storage="_Topic", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Topic
		{
			get
			{
				return this._Topic;
			}
			set
			{
				if ((this._Topic != value))
				{
					this.OnTopicChanging(value);
					this.SendPropertyChanging();
					this._Topic = value;
					this.SendPropertyChanged("Topic");
					this.OnTopicChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_PostDate", DbType="DateTime NOT NULL")]
		public System.DateTime PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[Column(Storage="_Blocked", DbType="Bit")]
		public System.Nullable<bool> Blocked
		{
			get
			{
				return this._Blocked;
			}
			set
			{
				if ((this._Blocked != value))
				{
					this.OnBlockedChanging(value);
					this.SendPropertyChanging();
					this._Blocked = value;
					this.SendPropertyChanged("Blocked");
					this.OnBlockedChanged();
				}
			}
		}
		
		[Association(Name="ForumTopic_ForumReply", Storage="_ForumReplies", ThisKey="id", OtherKey="Topic")]
		public EntitySet<ForumReply> ForumReplies
		{
			get
			{
				return this._ForumReplies;
			}
			set
			{
				this._ForumReplies.Assign(value);
			}
		}
		
		[Association(Name="Training_ForumTopic", Storage="_Training1", ThisKey="Training", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Training Training1
		{
			get
			{
				return this._Training1.Entity;
			}
			set
			{
				Training previousValue = this._Training1.Entity;
				if (((previousValue != value) 
							|| (this._Training1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Training1.Entity = null;
						previousValue.ForumTopics.Remove(this);
					}
					this._Training1.Entity = value;
					if ((value != null))
					{
						value.ForumTopics.Add(this);
						this._Training = value.id;
					}
					else
					{
						this._Training = default(System.Guid);
					}
					this.SendPropertyChanged("Training1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumReplies(ForumReply entity)
		{
			this.SendPropertyChanging();
			entity.ForumTopic = this;
		}
		
		private void detach_ForumReplies(ForumReply entity)
		{
			this.SendPropertyChanging();
			entity.ForumTopic = null;
		}
	}
	
	[Table(Name="dbo.GroupMembers")]
	public partial class GroupMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _mid;
		
		private System.Guid _id;
		
		private System.Nullable<System.Guid> _MGroup;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmidChanging(System.Guid value);
    partial void OnmidChanged();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnMGroupChanging(System.Nullable<System.Guid> value);
    partial void OnMGroupChanged();
    #endregion
		
		public GroupMember()
		{
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[Column(Storage="_mid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid mid
		{
			get
			{
				return this._mid;
			}
			set
			{
				if ((this._mid != value))
				{
					this.OnmidChanging(value);
					this.SendPropertyChanging();
					this._mid = value;
					this.SendPropertyChanged("mid");
					this.OnmidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_MGroup", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MGroup
		{
			get
			{
				return this._MGroup;
			}
			set
			{
				if ((this._MGroup != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMGroupChanging(value);
					this.SendPropertyChanging();
					this._MGroup = value;
					this.SendPropertyChanged("MGroup");
					this.OnMGroupChanged();
				}
			}
		}
		
		[Association(Name="Group_GroupMember", Storage="_Group", ThisKey="MGroup", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupMembers.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupMembers.Add(this);
						this._MGroup = value.id;
					}
					else
					{
						this._MGroup = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<int> _Type;
		
		private EntitySet<Course> _Courses;
		
		private EntitySet<GroupMember> _GroupMembers;
		
		private EntitySet<Training> _Trainings;
		
		private EntitySet<Training> _Trainings1;
		
		private EntitySet<Training> _Trainings2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    #endregion
		
		public Group()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._GroupMembers = new EntitySet<GroupMember>(new Action<GroupMember>(this.attach_GroupMembers), new Action<GroupMember>(this.detach_GroupMembers));
			this._Trainings = new EntitySet<Training>(new Action<Training>(this.attach_Trainings), new Action<Training>(this.detach_Trainings));
			this._Trainings1 = new EntitySet<Training>(new Action<Training>(this.attach_Trainings1), new Action<Training>(this.detach_Trainings1));
			this._Trainings2 = new EntitySet<Training>(new Action<Training>(this.attach_Trainings2), new Action<Training>(this.detach_Trainings2));
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Association(Name="Group_Course", Storage="_Courses", ThisKey="id", OtherKey="Instructors")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[Association(Name="Group_GroupMember", Storage="_GroupMembers", ThisKey="id", OtherKey="MGroup")]
		public EntitySet<GroupMember> GroupMembers
		{
			get
			{
				return this._GroupMembers;
			}
			set
			{
				this._GroupMembers.Assign(value);
			}
		}
		
		[Association(Name="Group_Training", Storage="_Trainings", ThisKey="id", OtherKey="Curators")]
		public EntitySet<Training> Trainings
		{
			get
			{
				return this._Trainings;
			}
			set
			{
				this._Trainings.Assign(value);
			}
		}
		
		[Association(Name="Group_Training1", Storage="_Trainings1", ThisKey="id", OtherKey="Instructors")]
		public EntitySet<Training> Trainings1
		{
			get
			{
				return this._Trainings1;
			}
			set
			{
				this._Trainings1.Assign(value);
			}
		}
		
		[Association(Name="Group_Training2", Storage="_Trainings2", ThisKey="id", OtherKey="Students")]
		public EntitySet<Training> Trainings2
		{
			get
			{
				return this._Trainings2;
			}
			set
			{
				this._Trainings2.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Trainings(Training entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Trainings(Training entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Trainings1(Training entity)
		{
			this.SendPropertyChanging();
			entity.Group1 = this;
		}
		
		private void detach_Trainings1(Training entity)
		{
			this.SendPropertyChanging();
			entity.Group1 = null;
		}
		
		private void attach_Trainings2(Training entity)
		{
			this.SendPropertyChanging();
			entity.Group2 = this;
		}
		
		private void detach_Trainings2(Training entity)
		{
			this.SendPropertyChanging();
			entity.Group2 = null;
		}
	}
	
	[Table(Name="dbo.Languages")]
	public partial class Language
	{
		
		private int _id;
		
		private string _NameEng;
		
		private string _NameNative;
		
		private string _Abbr;
		
		public Language()
		{
		}
		
		[Column(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_NameEng", DbType="NVarChar(50)")]
		public string NameEng
		{
			get
			{
				return this._NameEng;
			}
			set
			{
				if ((this._NameEng != value))
				{
					this._NameEng = value;
				}
			}
		}
		
		[Column(Storage="_NameNative", DbType="NVarChar(50)")]
		public string NameNative
		{
			get
			{
				return this._NameNative;
			}
			set
			{
				if ((this._NameNative != value))
				{
					this._NameNative = value;
				}
			}
		}
		
		[Column(Storage="_Abbr", DbType="NChar(3)")]
		public string Abbr
		{
			get
			{
				return this._Abbr;
			}
			set
			{
				if ((this._Abbr != value))
				{
					this._Abbr = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.News")]
	public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.DateTime _NewsDate;
		
		private System.Guid _Head;
		
		private System.Guid _Short;
		
		private System.Guid _Text;
		
		private string _MoreHref;
		
		private System.Guid _MoreText;
		
		private string _CourseCode;
		
		private System.Guid _Image;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnNewsDateChanging(System.DateTime value);
    partial void OnNewsDateChanged();
    partial void OnHeadChanging(System.Guid value);
    partial void OnHeadChanged();
    partial void OnShortChanging(System.Guid value);
    partial void OnShortChanged();
    partial void OnTextChanging(System.Guid value);
    partial void OnTextChanged();
    partial void OnMoreHrefChanging(string value);
    partial void OnMoreHrefChanged();
    partial void OnMoreTextChanging(System.Guid value);
    partial void OnMoreTextChanged();
    partial void OnCourseCodeChanging(string value);
    partial void OnCourseCodeChanged();
    partial void OnImageChanging(System.Guid value);
    partial void OnImageChanged();
    #endregion
		
		public New()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_NewsDate", DbType="DateTime NOT NULL")]
		public System.DateTime NewsDate
		{
			get
			{
				return this._NewsDate;
			}
			set
			{
				if ((this._NewsDate != value))
				{
					this.OnNewsDateChanging(value);
					this.SendPropertyChanging();
					this._NewsDate = value;
					this.SendPropertyChanged("NewsDate");
					this.OnNewsDateChanged();
				}
			}
		}
		
		[Column(Storage="_Head", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Head
		{
			get
			{
				return this._Head;
			}
			set
			{
				if ((this._Head != value))
				{
					this.OnHeadChanging(value);
					this.SendPropertyChanging();
					this._Head = value;
					this.SendPropertyChanged("Head");
					this.OnHeadChanged();
				}
			}
		}
		
		[Column(Storage="_Short", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Short
		{
			get
			{
				return this._Short;
			}
			set
			{
				if ((this._Short != value))
				{
					this.OnShortChanging(value);
					this.SendPropertyChanging();
					this._Short = value;
					this.SendPropertyChanged("Short");
					this.OnShortChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_MoreHref", DbType="NVarChar(128)")]
		public string MoreHref
		{
			get
			{
				return this._MoreHref;
			}
			set
			{
				if ((this._MoreHref != value))
				{
					this.OnMoreHrefChanging(value);
					this.SendPropertyChanging();
					this._MoreHref = value;
					this.SendPropertyChanged("MoreHref");
					this.OnMoreHrefChanged();
				}
			}
		}
		
		[Column(Storage="_MoreText", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MoreText
		{
			get
			{
				return this._MoreText;
			}
			set
			{
				if ((this._MoreText != value))
				{
					this.OnMoreTextChanging(value);
					this.SendPropertyChanging();
					this._MoreText = value;
					this.SendPropertyChanged("MoreText");
					this.OnMoreTextChanged();
				}
			}
		}
		
		[Column(Storage="_CourseCode", DbType="NVarChar(15)")]
		public string CourseCode
		{
			get
			{
				return this._CourseCode;
			}
			set
			{
				if ((this._CourseCode != value))
				{
					this.OnCourseCodeChanging(value);
					this.SendPropertyChanging();
					this._CourseCode = value;
					this.SendPropertyChanged("CourseCode");
					this.OnCourseCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Image", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ObjectRegions")]
	public partial class ObjectRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ObjectID;
		
		private System.Nullable<System.Guid> _RegionID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectIDChanging(System.Guid value);
    partial void OnObjectIDChanged();
    partial void OnRegionIDChanging(System.Nullable<System.Guid> value);
    partial void OnRegionIDChanged();
    #endregion
		
		public ObjectRegion()
		{
			OnCreated();
		}
		
		[Column(Storage="_ObjectID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_RegionID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Regions")]
	public partial class Region
	{
		
		private System.Nullable<System.Guid> _ID;
		
		private string _Name;
		
		private string _CodesCommaSeparated;
		
		public Region()
		{
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_CodesCommaSeparated", DbType="NVarChar(250)")]
		public string CodesCommaSeparated
		{
			get
			{
				return this._CodesCommaSeparated;
			}
			set
			{
				if ((this._CodesCommaSeparated != value))
				{
					this._CodesCommaSeparated = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Rights")]
	public partial class Right : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _eid;
		
		private System.Guid _permid;
		
		private System.Nullable<bool> _read;
		
		private System.Nullable<bool> _write;
		
		private System.Nullable<bool> _delete;
		
		private EntityRef<Entity> _Entity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OneidChanging(System.Guid value);
    partial void OneidChanged();
    partial void OnpermidChanging(System.Guid value);
    partial void OnpermidChanged();
    partial void OnreadChanging(System.Nullable<bool> value);
    partial void OnreadChanged();
    partial void OnwriteChanging(System.Nullable<bool> value);
    partial void OnwriteChanged();
    partial void OndeleteChanging(System.Nullable<bool> value);
    partial void OndeleteChanged();
    #endregion
		
		public Right()
		{
			this._Entity = default(EntityRef<Entity>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_eid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid eid
		{
			get
			{
				return this._eid;
			}
			set
			{
				if ((this._eid != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneidChanging(value);
					this.SendPropertyChanging();
					this._eid = value;
					this.SendPropertyChanged("eid");
					this.OneidChanged();
				}
			}
		}
		
		[Column(Storage="_permid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid permid
		{
			get
			{
				return this._permid;
			}
			set
			{
				if ((this._permid != value))
				{
					this.OnpermidChanging(value);
					this.SendPropertyChanging();
					this._permid = value;
					this.SendPropertyChanged("permid");
					this.OnpermidChanged();
				}
			}
		}
		
		[Column(Name="[read]", Storage="_read", DbType="Bit")]
		public System.Nullable<bool> read
		{
			get
			{
				return this._read;
			}
			set
			{
				if ((this._read != value))
				{
					this.OnreadChanging(value);
					this.SendPropertyChanging();
					this._read = value;
					this.SendPropertyChanged("read");
					this.OnreadChanged();
				}
			}
		}
		
		[Column(Storage="_write", DbType="Bit")]
		public System.Nullable<bool> write
		{
			get
			{
				return this._write;
			}
			set
			{
				if ((this._write != value))
				{
					this.OnwriteChanging(value);
					this.SendPropertyChanging();
					this._write = value;
					this.SendPropertyChanged("write");
					this.OnwriteChanged();
				}
			}
		}
		
		[Column(Name="[delete]", Storage="_delete", DbType="Bit")]
		public System.Nullable<bool> delete
		{
			get
			{
				return this._delete;
			}
			set
			{
				if ((this._delete != value))
				{
					this.OndeleteChanging(value);
					this.SendPropertyChanging();
					this._delete = value;
					this.SendPropertyChanged("delete");
					this.OndeleteChanged();
				}
			}
		}
		
		[Association(Name="Entity_Right", Storage="_Entity", ThisKey="eid", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.Rights.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.Rights.Add(this);
						this._eid = value.id;
					}
					else
					{
						this._eid = default(System.Guid);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Roles")]
	public partial class Role
	{
		
		private System.Nullable<System.Guid> _ID;
		
		private string _Name;
		
		private string _CodeName;
		
		private bool _IsGlobal;
		
		public Role()
		{
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_CodeName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string CodeName
		{
			get
			{
				return this._CodeName;
			}
			set
			{
				if ((this._CodeName != value))
				{
					this._CodeName = value;
				}
			}
		}
		
		[Column(Storage="_IsGlobal", DbType="Bit NOT NULL")]
		public bool IsGlobal
		{
			get
			{
				return this._IsGlobal;
			}
			set
			{
				if ((this._IsGlobal != value))
				{
					this._IsGlobal = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Schedule")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Nullable<System.Guid> _Training;
		
		private System.Nullable<System.Guid> _Theme;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private bool _isOpen;
		
		private bool _Mandatory;
		
		private EntityRef<Training> _Training1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnTrainingChanging(System.Nullable<System.Guid> value);
    partial void OnTrainingChanged();
    partial void OnThemeChanging(System.Nullable<System.Guid> value);
    partial void OnThemeChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnisOpenChanging(bool value);
    partial void OnisOpenChanged();
    partial void OnMandatoryChanging(bool value);
    partial void OnMandatoryChanged();
    #endregion
		
		public Schedule()
		{
			this._Training1 = default(EntityRef<Training>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Training", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Training
		{
			get
			{
				return this._Training;
			}
			set
			{
				if ((this._Training != value))
				{
					if (this._Training1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingChanging(value);
					this.SendPropertyChanging();
					this._Training = value;
					this.SendPropertyChanged("Training");
					this.OnTrainingChanged();
				}
			}
		}
		
		[Column(Storage="_Theme", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Theme
		{
			get
			{
				return this._Theme;
			}
			set
			{
				if ((this._Theme != value))
				{
					this.OnThemeChanging(value);
					this.SendPropertyChanging();
					this._Theme = value;
					this.SendPropertyChanged("Theme");
					this.OnThemeChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_isOpen", DbType="Bit NOT NULL")]
		public bool isOpen
		{
			get
			{
				return this._isOpen;
			}
			set
			{
				if ((this._isOpen != value))
				{
					this.OnisOpenChanging(value);
					this.SendPropertyChanging();
					this._isOpen = value;
					this.SendPropertyChanged("isOpen");
					this.OnisOpenChanged();
				}
			}
		}
		
		[Column(Storage="_Mandatory", DbType="Bit NOT NULL")]
		public bool Mandatory
		{
			get
			{
				return this._Mandatory;
			}
			set
			{
				if ((this._Mandatory != value))
				{
					this.OnMandatoryChanging(value);
					this.SendPropertyChanging();
					this._Mandatory = value;
					this.SendPropertyChanged("Mandatory");
					this.OnMandatoryChanged();
				}
			}
		}
		
		[Association(Name="Training_Schedule", Storage="_Training1", ThisKey="Training", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Training Training1
		{
			get
			{
				return this._Training1.Entity;
			}
			set
			{
				Training previousValue = this._Training1.Entity;
				if (((previousValue != value) 
							|| (this._Training1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Training1.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._Training1.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._Training = value.id;
					}
					else
					{
						this._Training = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Training1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _FirstName;
		
		private string _Patronymic;
		
		private string _LastName;
		
		private string _FirstNameEng;
		
		private string _LastNameEng;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private System.Nullable<bool> _Sex;
		
		private string _Organization;
		
		private string _OrgType;
		
		private string _JobPosition;
		
		private string _Chief;
		
		private string _ChiefPosition;
		
		private string _ChiefPhone;
		
		private string _Country;
		
		private string _City;
		
		private string _ZIP;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _Education;
		
		private string _Courses;
		
		private string _Certificates;
		
		private string _Comments;
		
		private string _Login;
		
		private string _Password;
		
		private System.Nullable<int> _Status;
		
		private string _MediaLibrary;
		
		private System.Nullable<System.DateTime> _LastLogin;
		
		private System.Guid _Photo;
		
		private int _TotalLogins;
		
		private bool _useCDLib;
		
		private string _cdPath;
		
		private System.Nullable<System.Guid> _PasswordHash;
		
		private System.Nullable<System.Guid> _PasswordHashSalt;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _LastModifyDate;
		
		private EntitySet<CDPath> _CDPaths;
		
		private EntitySet<TaskSolution> _TaskSolutions;
		
		private EntitySet<TrainingBlocking> _TrainingBlockings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameEngChanging(string value);
    partial void OnFirstNameEngChanged();
    partial void OnLastNameEngChanging(string value);
    partial void OnLastNameEngChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnSexChanging(System.Nullable<bool> value);
    partial void OnSexChanged();
    partial void OnOrganizationChanging(string value);
    partial void OnOrganizationChanged();
    partial void OnOrgTypeChanging(string value);
    partial void OnOrgTypeChanged();
    partial void OnJobPositionChanging(string value);
    partial void OnJobPositionChanged();
    partial void OnChiefChanging(string value);
    partial void OnChiefChanged();
    partial void OnChiefPositionChanging(string value);
    partial void OnChiefPositionChanged();
    partial void OnChiefPhoneChanging(string value);
    partial void OnChiefPhoneChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnZIPChanging(string value);
    partial void OnZIPChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEducationChanging(string value);
    partial void OnEducationChanged();
    partial void OnCoursesChanging(string value);
    partial void OnCoursesChanged();
    partial void OnCertificatesChanging(string value);
    partial void OnCertificatesChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnMediaLibraryChanging(string value);
    partial void OnMediaLibraryChanged();
    partial void OnLastLoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginChanged();
    partial void OnPhotoChanging(System.Guid value);
    partial void OnPhotoChanged();
    partial void OnTotalLoginsChanging(int value);
    partial void OnTotalLoginsChanged();
    partial void OnuseCDLibChanging(bool value);
    partial void OnuseCDLibChanged();
    partial void OncdPathChanging(string value);
    partial void OncdPathChanged();
    partial void OnPasswordHashChanging(System.Nullable<System.Guid> value);
    partial void OnPasswordHashChanged();
    partial void OnPasswordHashSaltChanging(System.Nullable<System.Guid> value);
    partial void OnPasswordHashSaltChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastModifyDateChanging(System.DateTime value);
    partial void OnLastModifyDateChanged();
    #endregion
		
		public Student()
		{
			this._CDPaths = new EntitySet<CDPath>(new Action<CDPath>(this.attach_CDPaths), new Action<CDPath>(this.detach_CDPaths));
			this._TaskSolutions = new EntitySet<TaskSolution>(new Action<TaskSolution>(this.attach_TaskSolutions), new Action<TaskSolution>(this.detach_TaskSolutions));
			this._TrainingBlockings = new EntitySet<TrainingBlocking>(new Action<TrainingBlocking>(this.attach_TrainingBlockings), new Action<TrainingBlocking>(this.detach_TrainingBlockings));
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(155)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_Patronymic", DbType="NVarChar(155)")]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(155)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_FirstNameEng", DbType="NVarChar(155)")]
		public string FirstNameEng
		{
			get
			{
				return this._FirstNameEng;
			}
			set
			{
				if ((this._FirstNameEng != value))
				{
					this.OnFirstNameEngChanging(value);
					this.SendPropertyChanging();
					this._FirstNameEng = value;
					this.SendPropertyChanged("FirstNameEng");
					this.OnFirstNameEngChanged();
				}
			}
		}
		
		[Column(Storage="_LastNameEng", DbType="NVarChar(155)")]
		public string LastNameEng
		{
			get
			{
				return this._LastNameEng;
			}
			set
			{
				if ((this._LastNameEng != value))
				{
					this.OnLastNameEngChanging(value);
					this.SendPropertyChanging();
					this._LastNameEng = value;
					this.SendPropertyChanged("LastNameEng");
					this.OnLastNameEngChanged();
				}
			}
		}
		
		[Column(Storage="_Birthday", DbType="DateTime")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[Column(Storage="_Sex", DbType="Bit")]
		public System.Nullable<bool> Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[Column(Storage="_Organization", DbType="NVarChar(155)")]
		public string Organization
		{
			get
			{
				return this._Organization;
			}
			set
			{
				if ((this._Organization != value))
				{
					this.OnOrganizationChanging(value);
					this.SendPropertyChanging();
					this._Organization = value;
					this.SendPropertyChanged("Organization");
					this.OnOrganizationChanged();
				}
			}
		}
		
		[Column(Storage="_OrgType", DbType="NVarChar(50)")]
		public string OrgType
		{
			get
			{
				return this._OrgType;
			}
			set
			{
				if ((this._OrgType != value))
				{
					this.OnOrgTypeChanging(value);
					this.SendPropertyChanging();
					this._OrgType = value;
					this.SendPropertyChanged("OrgType");
					this.OnOrgTypeChanged();
				}
			}
		}
		
		[Column(Storage="_JobPosition", DbType="NVarChar(155)")]
		public string JobPosition
		{
			get
			{
				return this._JobPosition;
			}
			set
			{
				if ((this._JobPosition != value))
				{
					this.OnJobPositionChanging(value);
					this.SendPropertyChanging();
					this._JobPosition = value;
					this.SendPropertyChanged("JobPosition");
					this.OnJobPositionChanged();
				}
			}
		}
		
		[Column(Storage="_Chief", DbType="NVarChar(155)")]
		public string Chief
		{
			get
			{
				return this._Chief;
			}
			set
			{
				if ((this._Chief != value))
				{
					this.OnChiefChanging(value);
					this.SendPropertyChanging();
					this._Chief = value;
					this.SendPropertyChanged("Chief");
					this.OnChiefChanged();
				}
			}
		}
		
		[Column(Storage="_ChiefPosition", DbType="NVarChar(155)")]
		public string ChiefPosition
		{
			get
			{
				return this._ChiefPosition;
			}
			set
			{
				if ((this._ChiefPosition != value))
				{
					this.OnChiefPositionChanging(value);
					this.SendPropertyChanging();
					this._ChiefPosition = value;
					this.SendPropertyChanged("ChiefPosition");
					this.OnChiefPositionChanged();
				}
			}
		}
		
		[Column(Storage="_ChiefPhone", DbType="NVarChar(100)")]
		public string ChiefPhone
		{
			get
			{
				return this._ChiefPhone;
			}
			set
			{
				if ((this._ChiefPhone != value))
				{
					this.OnChiefPhoneChanging(value);
					this.SendPropertyChanging();
					this._ChiefPhone = value;
					this.SendPropertyChanged("ChiefPhone");
					this.OnChiefPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="NVarChar(100)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(155)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_ZIP", DbType="NVarChar(50)")]
		public string ZIP
		{
			get
			{
				return this._ZIP;
			}
			set
			{
				if ((this._ZIP != value))
				{
					this.OnZIPChanging(value);
					this.SendPropertyChanging();
					this._ZIP = value;
					this.SendPropertyChanged("ZIP");
					this.OnZIPChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(100)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(100)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(80)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Education", DbType="NVarChar(255)")]
		public string Education
		{
			get
			{
				return this._Education;
			}
			set
			{
				if ((this._Education != value))
				{
					this.OnEducationChanging(value);
					this.SendPropertyChanging();
					this._Education = value;
					this.SendPropertyChanged("Education");
					this.OnEducationChanged();
				}
			}
		}
		
		[Column(Storage="_Courses", DbType="NVarChar(255)")]
		public string Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				if ((this._Courses != value))
				{
					this.OnCoursesChanging(value);
					this.SendPropertyChanging();
					this._Courses = value;
					this.SendPropertyChanged("Courses");
					this.OnCoursesChanged();
				}
			}
		}
		
		[Column(Storage="_Certificates", DbType="NVarChar(255)")]
		public string Certificates
		{
			get
			{
				return this._Certificates;
			}
			set
			{
				if ((this._Certificates != value))
				{
					this.OnCertificatesChanging(value);
					this.SendPropertyChanging();
					this._Certificates = value;
					this.SendPropertyChanged("Certificates");
					this.OnCertificatesChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(255)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_Login", DbType="NVarChar(80)")]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(20)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_MediaLibrary", DbType="NVarChar(255)")]
		public string MediaLibrary
		{
			get
			{
				return this._MediaLibrary;
			}
			set
			{
				if ((this._MediaLibrary != value))
				{
					this.OnMediaLibraryChanging(value);
					this.SendPropertyChanging();
					this._MediaLibrary = value;
					this.SendPropertyChanged("MediaLibrary");
					this.OnMediaLibraryChanged();
				}
			}
		}
		
		[Column(Storage="_LastLogin", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLogin
		{
			get
			{
				return this._LastLogin;
			}
			set
			{
				if ((this._LastLogin != value))
				{
					this.OnLastLoginChanging(value);
					this.SendPropertyChanging();
					this._LastLogin = value;
					this.SendPropertyChanged("LastLogin");
					this.OnLastLoginChanged();
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[Column(Storage="_TotalLogins", DbType="Int NOT NULL")]
		public int TotalLogins
		{
			get
			{
				return this._TotalLogins;
			}
			set
			{
				if ((this._TotalLogins != value))
				{
					this.OnTotalLoginsChanging(value);
					this.SendPropertyChanging();
					this._TotalLogins = value;
					this.SendPropertyChanged("TotalLogins");
					this.OnTotalLoginsChanged();
				}
			}
		}
		
		[Column(Storage="_useCDLib", DbType="Bit NOT NULL")]
		public bool useCDLib
		{
			get
			{
				return this._useCDLib;
			}
			set
			{
				if ((this._useCDLib != value))
				{
					this.OnuseCDLibChanging(value);
					this.SendPropertyChanging();
					this._useCDLib = value;
					this.SendPropertyChanged("useCDLib");
					this.OnuseCDLibChanged();
				}
			}
		}
		
		[Column(Storage="_cdPath", DbType="NVarChar(128)")]
		public string cdPath
		{
			get
			{
				return this._cdPath;
			}
			set
			{
				if ((this._cdPath != value))
				{
					this.OncdPathChanging(value);
					this.SendPropertyChanging();
					this._cdPath = value;
					this.SendPropertyChanged("cdPath");
					this.OncdPathChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordHash", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordHashSalt", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PasswordHashSalt
		{
			get
			{
				return this._PasswordHashSalt;
			}
			set
			{
				if ((this._PasswordHashSalt != value))
				{
					this.OnPasswordHashSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordHashSalt = value;
					this.SendPropertyChanged("PasswordHashSalt");
					this.OnPasswordHashSaltChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifyDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastModifyDate
		{
			get
			{
				return this._LastModifyDate;
			}
			set
			{
				if ((this._LastModifyDate != value))
				{
					this.OnLastModifyDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifyDate = value;
					this.SendPropertyChanged("LastModifyDate");
					this.OnLastModifyDateChanged();
				}
			}
		}
		
		[Association(Name="Student_CDPath", Storage="_CDPaths", ThisKey="id", OtherKey="studentId")]
		public EntitySet<CDPath> CDPaths
		{
			get
			{
				return this._CDPaths;
			}
			set
			{
				this._CDPaths.Assign(value);
			}
		}
		
		[Association(Name="Student_TaskSolution", Storage="_TaskSolutions", ThisKey="id", OtherKey="Student")]
		public EntitySet<TaskSolution> TaskSolutions
		{
			get
			{
				return this._TaskSolutions;
			}
			set
			{
				this._TaskSolutions.Assign(value);
			}
		}
		
		[Association(Name="Student_TrainingBlocking", Storage="_TrainingBlockings", ThisKey="id", OtherKey="Student")]
		public EntitySet<TrainingBlocking> TrainingBlockings
		{
			get
			{
				return this._TrainingBlockings;
			}
			set
			{
				this._TrainingBlockings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CDPaths(CDPath entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_CDPaths(CDPath entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_TaskSolutions(TaskSolution entity)
		{
			this.SendPropertyChanging();
			entity.Student1 = this;
		}
		
		private void detach_TaskSolutions(TaskSolution entity)
		{
			this.SendPropertyChanging();
			entity.Student1 = null;
		}
		
		private void attach_TrainingBlockings(TrainingBlocking entity)
		{
			this.SendPropertyChanging();
			entity.Student1 = this;
		}
		
		private void detach_TrainingBlockings(TrainingBlocking entity)
		{
			this.SendPropertyChanging();
			entity.Student1 = null;
		}
	}
	
	[Table(Name="dbo.Tasks")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Nullable<System.Guid> _Training;
		
		private System.Nullable<System.Guid> _Creator;
		
		private System.Nullable<int> _Type;
		
		private System.Nullable<System.Guid> _Name;
		
		private System.Nullable<System.Guid> _Description;
		
		private System.Nullable<System.DateTime> _TaskTime;
		
		private EntitySet<TaskSolution> _TaskSolutions;
		
		private EntityRef<Training> _Training1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnTrainingChanging(System.Nullable<System.Guid> value);
    partial void OnTrainingChanged();
    partial void OnCreatorChanging(System.Nullable<System.Guid> value);
    partial void OnCreatorChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnNameChanging(System.Nullable<System.Guid> value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(System.Nullable<System.Guid> value);
    partial void OnDescriptionChanged();
    partial void OnTaskTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTaskTimeChanged();
    #endregion
		
		public Task()
		{
			this._TaskSolutions = new EntitySet<TaskSolution>(new Action<TaskSolution>(this.attach_TaskSolutions), new Action<TaskSolution>(this.detach_TaskSolutions));
			this._Training1 = default(EntityRef<Training>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Training", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Training
		{
			get
			{
				return this._Training;
			}
			set
			{
				if ((this._Training != value))
				{
					if (this._Training1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingChanging(value);
					this.SendPropertyChanging();
					this._Training = value;
					this.SendPropertyChanged("Training");
					this.OnTrainingChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_TaskTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> TaskTime
		{
			get
			{
				return this._TaskTime;
			}
			set
			{
				if ((this._TaskTime != value))
				{
					this.OnTaskTimeChanging(value);
					this.SendPropertyChanging();
					this._TaskTime = value;
					this.SendPropertyChanged("TaskTime");
					this.OnTaskTimeChanged();
				}
			}
		}
		
		[Association(Name="Task_TaskSolution", Storage="_TaskSolutions", ThisKey="id", OtherKey="Task")]
		public EntitySet<TaskSolution> TaskSolutions
		{
			get
			{
				return this._TaskSolutions;
			}
			set
			{
				this._TaskSolutions.Assign(value);
			}
		}
		
		[Association(Name="Training_Task", Storage="_Training1", ThisKey="Training", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Training Training1
		{
			get
			{
				return this._Training1.Entity;
			}
			set
			{
				Training previousValue = this._Training1.Entity;
				if (((previousValue != value) 
							|| (this._Training1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Training1.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Training1.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._Training = value.id;
					}
					else
					{
						this._Training = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Training1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaskSolutions(TaskSolution entity)
		{
			this.SendPropertyChanging();
			entity.Task1 = this;
		}
		
		private void detach_TaskSolutions(TaskSolution entity)
		{
			this.SendPropertyChanging();
			entity.Task1 = null;
		}
	}
	
	[Table(Name="dbo.VTerms")]
	public partial class VTerm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _Name;
		
		private System.Guid _Text;
		
		private EntitySet<Vocabulary> _Vocabularies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnNameChanging(System.Guid value);
    partial void OnNameChanged();
    partial void OnTextChanging(System.Guid value);
    partial void OnTextChanged();
    #endregion
		
		public VTerm()
		{
			this._Vocabularies = new EntitySet<Vocabulary>(new Action<Vocabulary>(this.attach_Vocabularies), new Action<Vocabulary>(this.detach_Vocabularies));
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="VTerm_Vocabulary", Storage="_Vocabularies", ThisKey="id", OtherKey="Term")]
		public EntitySet<Vocabulary> Vocabularies
		{
			get
			{
				return this._Vocabularies;
			}
			set
			{
				this._Vocabularies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vocabularies(Vocabulary entity)
		{
			this.SendPropertyChanging();
			entity.VTerm = this;
		}
		
		private void detach_Vocabularies(Vocabulary entity)
		{
			this.SendPropertyChanging();
			entity.VTerm = null;
		}
	}
	
	[Table(Name="dbo.TaskSolutions")]
	public partial class TaskSolution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _Task;
		
		private System.Guid _Student;
		
		private int _Complete;
		
		private string _Solution;
		
		private System.Nullable<System.DateTime> _SDate;
		
		private EntityRef<Student> _Student1;
		
		private EntityRef<Task> _Task1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnTaskChanging(System.Guid value);
    partial void OnTaskChanged();
    partial void OnStudentChanging(System.Guid value);
    partial void OnStudentChanged();
    partial void OnCompleteChanging(int value);
    partial void OnCompleteChanged();
    partial void OnSolutionChanging(string value);
    partial void OnSolutionChanged();
    partial void OnSDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSDateChanged();
    #endregion
		
		public TaskSolution()
		{
			this._Student1 = default(EntityRef<Student>);
			this._Task1 = default(EntityRef<Task>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Task", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				if ((this._Task != value))
				{
					if (this._Task1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskChanging(value);
					this.SendPropertyChanging();
					this._Task = value;
					this.SendPropertyChanged("Task");
					this.OnTaskChanged();
				}
			}
		}
		
		[Column(Storage="_Student", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Student
		{
			get
			{
				return this._Student;
			}
			set
			{
				if ((this._Student != value))
				{
					if (this._Student1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentChanging(value);
					this.SendPropertyChanging();
					this._Student = value;
					this.SendPropertyChanged("Student");
					this.OnStudentChanged();
				}
			}
		}
		
		[Column(Storage="_Complete", DbType="Int NOT NULL")]
		public int Complete
		{
			get
			{
				return this._Complete;
			}
			set
			{
				if ((this._Complete != value))
				{
					this.OnCompleteChanging(value);
					this.SendPropertyChanging();
					this._Complete = value;
					this.SendPropertyChanged("Complete");
					this.OnCompleteChanged();
				}
			}
		}
		
		[Column(Storage="_Solution", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Solution
		{
			get
			{
				return this._Solution;
			}
			set
			{
				if ((this._Solution != value))
				{
					this.OnSolutionChanging(value);
					this.SendPropertyChanging();
					this._Solution = value;
					this.SendPropertyChanged("Solution");
					this.OnSolutionChanged();
				}
			}
		}
		
		[Column(Storage="_SDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SDate
		{
			get
			{
				return this._SDate;
			}
			set
			{
				if ((this._SDate != value))
				{
					this.OnSDateChanging(value);
					this.SendPropertyChanging();
					this._SDate = value;
					this.SendPropertyChanged("SDate");
					this.OnSDateChanged();
				}
			}
		}
		
		[Association(Name="Student_TaskSolution", Storage="_Student1", ThisKey="Student", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Student Student1
		{
			get
			{
				return this._Student1.Entity;
			}
			set
			{
				Student previousValue = this._Student1.Entity;
				if (((previousValue != value) 
							|| (this._Student1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student1.Entity = null;
						previousValue.TaskSolutions.Remove(this);
					}
					this._Student1.Entity = value;
					if ((value != null))
					{
						value.TaskSolutions.Add(this);
						this._Student = value.id;
					}
					else
					{
						this._Student = default(System.Guid);
					}
					this.SendPropertyChanged("Student1");
				}
			}
		}
		
		[Association(Name="Task_TaskSolution", Storage="_Task1", ThisKey="Task", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Task Task1
		{
			get
			{
				return this._Task1.Entity;
			}
			set
			{
				Task previousValue = this._Task1.Entity;
				if (((previousValue != value) 
							|| (this._Task1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task1.Entity = null;
						previousValue.TaskSolutions.Remove(this);
					}
					this._Task1.Entity = value;
					if ((value != null))
					{
						value.TaskSolutions.Add(this);
						this._Task = value.id;
					}
					else
					{
						this._Task = default(System.Guid);
					}
					this.SendPropertyChanged("Task1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TestAnswers")]
	public partial class TestAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _TestResults;
		
		private System.Guid _Question;
		
		private string _Answer;
		
		private System.Nullable<int> _AnswerTime;
		
		private int _Points;
		
		private EntityRef<TestQuestion> _TestQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnTestResultsChanging(System.Guid value);
    partial void OnTestResultsChanged();
    partial void OnQuestionChanging(System.Guid value);
    partial void OnQuestionChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnAnswerTimeChanging(System.Nullable<int> value);
    partial void OnAnswerTimeChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    #endregion
		
		public TestAnswer()
		{
			this._TestQuestion = default(EntityRef<TestQuestion>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_TestResults", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TestResults
		{
			get
			{
				return this._TestResults;
			}
			set
			{
				if ((this._TestResults != value))
				{
					this.OnTestResultsChanging(value);
					this.SendPropertyChanging();
					this._TestResults = value;
					this.SendPropertyChanged("TestResults");
					this.OnTestResultsChanged();
				}
			}
		}
		
		[Column(Storage="_Question", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					if (this._TestQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_Answer", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_AnswerTime", DbType="Int")]
		public System.Nullable<int> AnswerTime
		{
			get
			{
				return this._AnswerTime;
			}
			set
			{
				if ((this._AnswerTime != value))
				{
					this.OnAnswerTimeChanging(value);
					this.SendPropertyChanging();
					this._AnswerTime = value;
					this.SendPropertyChanged("AnswerTime");
					this.OnAnswerTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[Association(Name="TestQuestion_TestAnswer", Storage="_TestQuestion", ThisKey="Question", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TestQuestion TestQuestion
		{
			get
			{
				return this._TestQuestion.Entity;
			}
			set
			{
				TestQuestion previousValue = this._TestQuestion.Entity;
				if (((previousValue != value) 
							|| (this._TestQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestQuestion.Entity = null;
						previousValue.TestAnswers.Remove(this);
					}
					this._TestQuestion.Entity = value;
					if ((value != null))
					{
						value.TestAnswers.Add(this);
						this._Question = value.id;
					}
					else
					{
						this._Question = default(System.Guid);
					}
					this.SendPropertyChanged("TestQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TestQuestions")]
	public partial class TestQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _Test;
		
		private System.Guid _Content;
		
		private System.Guid _ShortHint;
		
		private System.Guid _LongHint;
		
		private int _Points;
		
		private System.Guid _Answer;
		
		private int _Type;
		
		private int _QOrder;
		
		private System.Nullable<System.Guid> _Theme;
		
		private EntitySet<TestAnswer> _TestAnswers;
		
		private EntityRef<Test> _Test1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnTestChanging(System.Guid value);
    partial void OnTestChanged();
    partial void OnContentChanging(System.Guid value);
    partial void OnContentChanged();
    partial void OnShortHintChanging(System.Guid value);
    partial void OnShortHintChanged();
    partial void OnLongHintChanging(System.Guid value);
    partial void OnLongHintChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    partial void OnAnswerChanging(System.Guid value);
    partial void OnAnswerChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnQOrderChanging(int value);
    partial void OnQOrderChanged();
    partial void OnThemeChanging(System.Nullable<System.Guid> value);
    partial void OnThemeChanged();
    #endregion
		
		public TestQuestion()
		{
			this._TestAnswers = new EntitySet<TestAnswer>(new Action<TestAnswer>(this.attach_TestAnswers), new Action<TestAnswer>(this.detach_TestAnswers));
			this._Test1 = default(EntityRef<Test>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Test", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Test
		{
			get
			{
				return this._Test;
			}
			set
			{
				if ((this._Test != value))
				{
					if (this._Test1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestChanging(value);
					this.SendPropertyChanging();
					this._Test = value;
					this.SendPropertyChanged("Test");
					this.OnTestChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_ShortHint", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ShortHint
		{
			get
			{
				return this._ShortHint;
			}
			set
			{
				if ((this._ShortHint != value))
				{
					this.OnShortHintChanging(value);
					this.SendPropertyChanging();
					this._ShortHint = value;
					this.SendPropertyChanged("ShortHint");
					this.OnShortHintChanged();
				}
			}
		}
		
		[Column(Storage="_LongHint", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid LongHint
		{
			get
			{
				return this._LongHint;
			}
			set
			{
				if ((this._LongHint != value))
				{
					this.OnLongHintChanging(value);
					this.SendPropertyChanging();
					this._LongHint = value;
					this.SendPropertyChanged("LongHint");
					this.OnLongHintChanged();
				}
			}
		}
		
		[Column(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[Column(Storage="_Answer", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_QOrder", DbType="Int NOT NULL")]
		public int QOrder
		{
			get
			{
				return this._QOrder;
			}
			set
			{
				if ((this._QOrder != value))
				{
					this.OnQOrderChanging(value);
					this.SendPropertyChanging();
					this._QOrder = value;
					this.SendPropertyChanged("QOrder");
					this.OnQOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Theme", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Theme
		{
			get
			{
				return this._Theme;
			}
			set
			{
				if ((this._Theme != value))
				{
					this.OnThemeChanging(value);
					this.SendPropertyChanging();
					this._Theme = value;
					this.SendPropertyChanged("Theme");
					this.OnThemeChanged();
				}
			}
		}
		
		[Association(Name="TestQuestion_TestAnswer", Storage="_TestAnswers", ThisKey="id", OtherKey="Question")]
		public EntitySet<TestAnswer> TestAnswers
		{
			get
			{
				return this._TestAnswers;
			}
			set
			{
				this._TestAnswers.Assign(value);
			}
		}
		
		[Association(Name="Test_TestQuestion", Storage="_Test1", ThisKey="Test", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Test Test1
		{
			get
			{
				return this._Test1.Entity;
			}
			set
			{
				Test previousValue = this._Test1.Entity;
				if (((previousValue != value) 
							|| (this._Test1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test1.Entity = null;
						previousValue.TestQuestions.Remove(this);
					}
					this._Test1.Entity = value;
					if ((value != null))
					{
						value.TestQuestions.Add(this);
						this._Test = value.id;
					}
					else
					{
						this._Test = default(System.Guid);
					}
					this.SendPropertyChanged("Test1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestAnswers(TestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.TestQuestion = this;
		}
		
		private void detach_TestAnswers(TestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.TestQuestion = null;
		}
	}
	
	[Table(Name="dbo.TestResults")]
	public partial class TestResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _Test;
		
		private System.Guid _Student;
		
		private bool _Complete;
		
		private System.Nullable<System.DateTime> _CompletionDate;
		
		private System.Nullable<int> _Tries;
		
		private System.Nullable<int> _AllowTries;
		
		private System.Nullable<System.DateTime> _TryStart;
		
		private bool _Skipped;
		
		private EntityRef<Test> _Test1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnTestChanging(System.Guid value);
    partial void OnTestChanged();
    partial void OnStudentChanging(System.Guid value);
    partial void OnStudentChanged();
    partial void OnCompleteChanging(bool value);
    partial void OnCompleteChanged();
    partial void OnCompletionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletionDateChanged();
    partial void OnTriesChanging(System.Nullable<int> value);
    partial void OnTriesChanged();
    partial void OnAllowTriesChanging(System.Nullable<int> value);
    partial void OnAllowTriesChanged();
    partial void OnTryStartChanging(System.Nullable<System.DateTime> value);
    partial void OnTryStartChanged();
    partial void OnSkippedChanging(bool value);
    partial void OnSkippedChanged();
    #endregion
		
		public TestResult()
		{
			this._Test1 = default(EntityRef<Test>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Test", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Test
		{
			get
			{
				return this._Test;
			}
			set
			{
				if ((this._Test != value))
				{
					if (this._Test1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestChanging(value);
					this.SendPropertyChanging();
					this._Test = value;
					this.SendPropertyChanged("Test");
					this.OnTestChanged();
				}
			}
		}
		
		[Column(Storage="_Student", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Student
		{
			get
			{
				return this._Student;
			}
			set
			{
				if ((this._Student != value))
				{
					this.OnStudentChanging(value);
					this.SendPropertyChanging();
					this._Student = value;
					this.SendPropertyChanged("Student");
					this.OnStudentChanged();
				}
			}
		}
		
		[Column(Storage="_Complete", DbType="Bit NOT NULL")]
		public bool Complete
		{
			get
			{
				return this._Complete;
			}
			set
			{
				if ((this._Complete != value))
				{
					this.OnCompleteChanging(value);
					this.SendPropertyChanging();
					this._Complete = value;
					this.SendPropertyChanged("Complete");
					this.OnCompleteChanged();
				}
			}
		}
		
		[Column(Storage="_CompletionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompletionDate
		{
			get
			{
				return this._CompletionDate;
			}
			set
			{
				if ((this._CompletionDate != value))
				{
					this.OnCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._CompletionDate = value;
					this.SendPropertyChanged("CompletionDate");
					this.OnCompletionDateChanged();
				}
			}
		}
		
		[Column(Storage="_Tries", DbType="Int")]
		public System.Nullable<int> Tries
		{
			get
			{
				return this._Tries;
			}
			set
			{
				if ((this._Tries != value))
				{
					this.OnTriesChanging(value);
					this.SendPropertyChanging();
					this._Tries = value;
					this.SendPropertyChanged("Tries");
					this.OnTriesChanged();
				}
			}
		}
		
		[Column(Storage="_AllowTries", DbType="Int")]
		public System.Nullable<int> AllowTries
		{
			get
			{
				return this._AllowTries;
			}
			set
			{
				if ((this._AllowTries != value))
				{
					this.OnAllowTriesChanging(value);
					this.SendPropertyChanging();
					this._AllowTries = value;
					this.SendPropertyChanged("AllowTries");
					this.OnAllowTriesChanged();
				}
			}
		}
		
		[Column(Storage="_TryStart", DbType="DateTime")]
		public System.Nullable<System.DateTime> TryStart
		{
			get
			{
				return this._TryStart;
			}
			set
			{
				if ((this._TryStart != value))
				{
					this.OnTryStartChanging(value);
					this.SendPropertyChanging();
					this._TryStart = value;
					this.SendPropertyChanged("TryStart");
					this.OnTryStartChanged();
				}
			}
		}
		
		[Column(Storage="_Skipped", DbType="Bit NOT NULL")]
		public bool Skipped
		{
			get
			{
				return this._Skipped;
			}
			set
			{
				if ((this._Skipped != value))
				{
					this.OnSkippedChanging(value);
					this.SendPropertyChanging();
					this._Skipped = value;
					this.SendPropertyChanged("Skipped");
					this.OnSkippedChanged();
				}
			}
		}
		
		[Association(Name="Test_TestResult", Storage="_Test1", ThisKey="Test", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Test Test1
		{
			get
			{
				return this._Test1.Entity;
			}
			set
			{
				Test previousValue = this._Test1.Entity;
				if (((previousValue != value) 
							|| (this._Test1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test1.Entity = null;
						previousValue.TestResults.Remove(this);
					}
					this._Test1.Entity = value;
					if ((value != null))
					{
						value.TestResults.Add(this);
						this._Test = value.id;
					}
					else
					{
						this._Test = default(System.Guid);
					}
					this.SendPropertyChanged("Test1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tests")]
	public partial class Test : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private int _Type;
		
		private System.Nullable<System.Guid> _Parent;
		
		private int _Duration;
		
		private int _Points;
		
		private bool _Show;
		
		private bool _Split;
		
		private bool _AutoFinish;
		
		private System.Nullable<int> _DefLanguage;
		
		private bool _CanSwitchLang;
		
		private int _Hints;
		
		private string _InternalName;
		
		private bool _ShowThemes;
		
		private EntitySet<Course> _Courses;
		
		private EntitySet<Course> _Courses1;
		
		private EntitySet<TestQuestion> _TestQuestions;
		
		private EntitySet<TestResult> _TestResults;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnParentChanging(System.Nullable<System.Guid> value);
    partial void OnParentChanged();
    partial void OnDurationChanging(int value);
    partial void OnDurationChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    partial void OnShowChanging(bool value);
    partial void OnShowChanged();
    partial void OnSplitChanging(bool value);
    partial void OnSplitChanged();
    partial void OnAutoFinishChanging(bool value);
    partial void OnAutoFinishChanged();
    partial void OnDefLanguageChanging(System.Nullable<int> value);
    partial void OnDefLanguageChanged();
    partial void OnCanSwitchLangChanging(bool value);
    partial void OnCanSwitchLangChanged();
    partial void OnHintsChanging(int value);
    partial void OnHintsChanged();
    partial void OnInternalNameChanging(string value);
    partial void OnInternalNameChanged();
    partial void OnShowThemesChanging(bool value);
    partial void OnShowThemesChanged();
    #endregion
		
		public Test()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._Courses1 = new EntitySet<Course>(new Action<Course>(this.attach_Courses1), new Action<Course>(this.detach_Courses1));
			this._TestQuestions = new EntitySet<TestQuestion>(new Action<TestQuestion>(this.attach_TestQuestions), new Action<TestQuestion>(this.detach_TestQuestions));
			this._TestResults = new EntitySet<TestResult>(new Action<TestResult>(this.attach_TestResults), new Action<TestResult>(this.detach_TestResults));
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Parent", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Parent
		{
			get
			{
				return this._Parent;
			}
			set
			{
				if ((this._Parent != value))
				{
					this.OnParentChanging(value);
					this.SendPropertyChanging();
					this._Parent = value;
					this.SendPropertyChanged("Parent");
					this.OnParentChanged();
				}
			}
		}
		
		[Column(Storage="_Duration", DbType="Int NOT NULL")]
		public int Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[Column(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[Column(Storage="_Show", DbType="Bit NOT NULL")]
		public bool Show
		{
			get
			{
				return this._Show;
			}
			set
			{
				if ((this._Show != value))
				{
					this.OnShowChanging(value);
					this.SendPropertyChanging();
					this._Show = value;
					this.SendPropertyChanged("Show");
					this.OnShowChanged();
				}
			}
		}
		
		[Column(Storage="_Split", DbType="Bit NOT NULL")]
		public bool Split
		{
			get
			{
				return this._Split;
			}
			set
			{
				if ((this._Split != value))
				{
					this.OnSplitChanging(value);
					this.SendPropertyChanging();
					this._Split = value;
					this.SendPropertyChanged("Split");
					this.OnSplitChanged();
				}
			}
		}
		
		[Column(Storage="_AutoFinish", DbType="Bit NOT NULL")]
		public bool AutoFinish
		{
			get
			{
				return this._AutoFinish;
			}
			set
			{
				if ((this._AutoFinish != value))
				{
					this.OnAutoFinishChanging(value);
					this.SendPropertyChanging();
					this._AutoFinish = value;
					this.SendPropertyChanged("AutoFinish");
					this.OnAutoFinishChanged();
				}
			}
		}
		
		[Column(Storage="_DefLanguage", DbType="Int")]
		public System.Nullable<int> DefLanguage
		{
			get
			{
				return this._DefLanguage;
			}
			set
			{
				if ((this._DefLanguage != value))
				{
					this.OnDefLanguageChanging(value);
					this.SendPropertyChanging();
					this._DefLanguage = value;
					this.SendPropertyChanged("DefLanguage");
					this.OnDefLanguageChanged();
				}
			}
		}
		
		[Column(Storage="_CanSwitchLang", DbType="Bit NOT NULL")]
		public bool CanSwitchLang
		{
			get
			{
				return this._CanSwitchLang;
			}
			set
			{
				if ((this._CanSwitchLang != value))
				{
					this.OnCanSwitchLangChanging(value);
					this.SendPropertyChanging();
					this._CanSwitchLang = value;
					this.SendPropertyChanged("CanSwitchLang");
					this.OnCanSwitchLangChanged();
				}
			}
		}
		
		[Column(Storage="_Hints", DbType="Int NOT NULL")]
		public int Hints
		{
			get
			{
				return this._Hints;
			}
			set
			{
				if ((this._Hints != value))
				{
					this.OnHintsChanging(value);
					this.SendPropertyChanging();
					this._Hints = value;
					this.SendPropertyChanged("Hints");
					this.OnHintsChanged();
				}
			}
		}
		
		[Column(Storage="_InternalName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string InternalName
		{
			get
			{
				return this._InternalName;
			}
			set
			{
				if ((this._InternalName != value))
				{
					this.OnInternalNameChanging(value);
					this.SendPropertyChanging();
					this._InternalName = value;
					this.SendPropertyChanged("InternalName");
					this.OnInternalNameChanged();
				}
			}
		}
		
		[Column(Storage="_ShowThemes", DbType="Bit NOT NULL")]
		public bool ShowThemes
		{
			get
			{
				return this._ShowThemes;
			}
			set
			{
				if ((this._ShowThemes != value))
				{
					this.OnShowThemesChanging(value);
					this.SendPropertyChanging();
					this._ShowThemes = value;
					this.SendPropertyChanged("ShowThemes");
					this.OnShowThemesChanged();
				}
			}
		}
		
		[Association(Name="Test_Course", Storage="_Courses", ThisKey="id", OtherKey="FinishQuestionnaire")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[Association(Name="Test_Course1", Storage="_Courses1", ThisKey="id", OtherKey="StartQuestionnaire")]
		public EntitySet<Course> Courses1
		{
			get
			{
				return this._Courses1;
			}
			set
			{
				this._Courses1.Assign(value);
			}
		}
		
		[Association(Name="Test_TestQuestion", Storage="_TestQuestions", ThisKey="id", OtherKey="Test")]
		public EntitySet<TestQuestion> TestQuestions
		{
			get
			{
				return this._TestQuestions;
			}
			set
			{
				this._TestQuestions.Assign(value);
			}
		}
		
		[Association(Name="Test_TestResult", Storage="_TestResults", ThisKey="id", OtherKey="Test")]
		public EntitySet<TestResult> TestResults
		{
			get
			{
				return this._TestResults;
			}
			set
			{
				this._TestResults.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_Courses1(Course entity)
		{
			this.SendPropertyChanging();
			entity.Test1 = this;
		}
		
		private void detach_Courses1(Course entity)
		{
			this.SendPropertyChanging();
			entity.Test1 = null;
		}
		
		private void attach_TestQuestions(TestQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Test1 = this;
		}
		
		private void detach_TestQuestions(TestQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Test1 = null;
		}
		
		private void attach_TestResults(TestResult entity)
		{
			this.SendPropertyChanging();
			entity.Test1 = this;
		}
		
		private void detach_TestResults(TestResult entity)
		{
			this.SendPropertyChanging();
			entity.Test1 = null;
		}
	}
	
	[Table(Name="dbo.TestWriteTable")]
	public partial class TestWriteTable
	{
		
		private string _Dummy;
		
		public TestWriteTable()
		{
		}
		
		[Column(Name="[Dummy]", Storage="_Dummy", DbType="NVarChar(255)")]
		public string Dummy
		{
			get
			{
				return this._Dummy;
			}
			set
			{
				if ((this._Dummy != value))
				{
					this._Dummy = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Themes")]
	public partial class Theme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private byte _Type;
		
		private System.Guid _Name;
		
		private System.Guid _Parent;
		
		private int _Duration;
		
		private bool _Mandatory;
		
		private System.Guid _Content;
		
		private int _TOrder;
		
		private System.Nullable<System.Guid> _Practice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnNameChanging(System.Guid value);
    partial void OnNameChanged();
    partial void OnParentChanging(System.Guid value);
    partial void OnParentChanged();
    partial void OnDurationChanging(int value);
    partial void OnDurationChanged();
    partial void OnMandatoryChanging(bool value);
    partial void OnMandatoryChanged();
    partial void OnContentChanging(System.Guid value);
    partial void OnContentChanged();
    partial void OnTOrderChanging(int value);
    partial void OnTOrderChanged();
    partial void OnPracticeChanging(System.Nullable<System.Guid> value);
    partial void OnPracticeChanged();
    #endregion
		
		public Theme()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Parent", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Parent
		{
			get
			{
				return this._Parent;
			}
			set
			{
				if ((this._Parent != value))
				{
					this.OnParentChanging(value);
					this.SendPropertyChanging();
					this._Parent = value;
					this.SendPropertyChanged("Parent");
					this.OnParentChanged();
				}
			}
		}
		
		[Column(Storage="_Duration", DbType="Int NOT NULL")]
		public int Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[Column(Storage="_Mandatory", DbType="Bit NOT NULL")]
		public bool Mandatory
		{
			get
			{
				return this._Mandatory;
			}
			set
			{
				if ((this._Mandatory != value))
				{
					this.OnMandatoryChanging(value);
					this.SendPropertyChanging();
					this._Mandatory = value;
					this.SendPropertyChanged("Mandatory");
					this.OnMandatoryChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_TOrder", DbType="Int NOT NULL")]
		public int TOrder
		{
			get
			{
				return this._TOrder;
			}
			set
			{
				if ((this._TOrder != value))
				{
					this.OnTOrderChanging(value);
					this.SendPropertyChanging();
					this._TOrder = value;
					this.SendPropertyChanged("TOrder");
					this.OnTOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Practice", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Practice
		{
			get
			{
				return this._Practice;
			}
			set
			{
				if ((this._Practice != value))
				{
					this.OnPracticeChanging(value);
					this.SendPropertyChanging();
					this._Practice = value;
					this.SendPropertyChanged("Practice");
					this.OnPracticeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tracks")]
	public partial class Track : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _Name;
		
		private System.Guid _Description;
		
		private System.Guid _Students;
		
		private System.Guid _Trainings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnNameChanging(System.Guid value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(System.Guid value);
    partial void OnDescriptionChanged();
    partial void OnStudentsChanging(System.Guid value);
    partial void OnStudentsChanged();
    partial void OnTrainingsChanging(System.Guid value);
    partial void OnTrainingsChanged();
    #endregion
		
		public Track()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Students", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				if ((this._Students != value))
				{
					this.OnStudentsChanging(value);
					this.SendPropertyChanging();
					this._Students = value;
					this.SendPropertyChanged("Students");
					this.OnStudentsChanged();
				}
			}
		}
		
		[Column(Storage="_Trainings", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Trainings
		{
			get
			{
				return this._Trainings;
			}
			set
			{
				if ((this._Trainings != value))
				{
					this.OnTrainingsChanging(value);
					this.SendPropertyChanging();
					this._Trainings = value;
					this.SendPropertyChanged("Trainings");
					this.OnTrainingsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TrainingBlocking")]
	public partial class TrainingBlocking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _Student;
		
		private System.Guid _Training;
		
		private EntityRef<Student> _Student1;
		
		private EntityRef<Training> _Training1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnStudentChanging(System.Guid value);
    partial void OnStudentChanged();
    partial void OnTrainingChanging(System.Guid value);
    partial void OnTrainingChanged();
    #endregion
		
		public TrainingBlocking()
		{
			this._Student1 = default(EntityRef<Student>);
			this._Training1 = default(EntityRef<Training>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Student", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Student
		{
			get
			{
				return this._Student;
			}
			set
			{
				if ((this._Student != value))
				{
					if (this._Student1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentChanging(value);
					this.SendPropertyChanging();
					this._Student = value;
					this.SendPropertyChanged("Student");
					this.OnStudentChanged();
				}
			}
		}
		
		[Column(Storage="_Training", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Training
		{
			get
			{
				return this._Training;
			}
			set
			{
				if ((this._Training != value))
				{
					if (this._Training1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingChanging(value);
					this.SendPropertyChanging();
					this._Training = value;
					this.SendPropertyChanged("Training");
					this.OnTrainingChanged();
				}
			}
		}
		
		[Association(Name="Student_TrainingBlocking", Storage="_Student1", ThisKey="Student", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Student Student1
		{
			get
			{
				return this._Student1.Entity;
			}
			set
			{
				Student previousValue = this._Student1.Entity;
				if (((previousValue != value) 
							|| (this._Student1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student1.Entity = null;
						previousValue.TrainingBlockings.Remove(this);
					}
					this._Student1.Entity = value;
					if ((value != null))
					{
						value.TrainingBlockings.Add(this);
						this._Student = value.id;
					}
					else
					{
						this._Student = default(System.Guid);
					}
					this.SendPropertyChanged("Student1");
				}
			}
		}
		
		[Association(Name="Training_TrainingBlocking", Storage="_Training1", ThisKey="Training", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Training Training1
		{
			get
			{
				return this._Training1.Entity;
			}
			set
			{
				Training previousValue = this._Training1.Entity;
				if (((previousValue != value) 
							|| (this._Training1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Training1.Entity = null;
						previousValue.TrainingBlockings.Remove(this);
					}
					this._Training1.Entity = value;
					if ((value != null))
					{
						value.TrainingBlockings.Add(this);
						this._Training = value.id;
					}
					else
					{
						this._Training = default(System.Guid);
					}
					this.SendPropertyChanged("Training1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Trainings")]
	public partial class Training : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _Code;
		
		private System.Guid _Name;
		
		private System.Guid _Comment;
		
		private System.Guid _Course;
		
		private bool _isPublic;
		
		private bool _isActive;
		
		private System.Guid _Instructors;
		
		private System.Guid _Curators;
		
		private System.Guid _Students;
		
		private bool _TimeStrict;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private bool _TestOnly;
		
		private bool _Expires;
		
		private EntitySet<CDPath> _CDPaths;
		
		private EntitySet<ForumTopic> _ForumTopics;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<TrainingBlocking> _TrainingBlockings;
		
		private EntityRef<Course> _Course1;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Group> _Group1;
		
		private EntityRef<Group> _Group2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(System.Guid value);
    partial void OnNameChanged();
    partial void OnCommentChanging(System.Guid value);
    partial void OnCommentChanged();
    partial void OnCourseChanging(System.Guid value);
    partial void OnCourseChanged();
    partial void OnisPublicChanging(bool value);
    partial void OnisPublicChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    partial void OnInstructorsChanging(System.Guid value);
    partial void OnInstructorsChanged();
    partial void OnCuratorsChanging(System.Guid value);
    partial void OnCuratorsChanged();
    partial void OnStudentsChanging(System.Guid value);
    partial void OnStudentsChanged();
    partial void OnTimeStrictChanging(bool value);
    partial void OnTimeStrictChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnTestOnlyChanging(bool value);
    partial void OnTestOnlyChanged();
    partial void OnExpiresChanging(bool value);
    partial void OnExpiresChanged();
    #endregion
		
		public Training()
		{
			this._CDPaths = new EntitySet<CDPath>(new Action<CDPath>(this.attach_CDPaths), new Action<CDPath>(this.detach_CDPaths));
			this._ForumTopics = new EntitySet<ForumTopic>(new Action<ForumTopic>(this.attach_ForumTopics), new Action<ForumTopic>(this.detach_ForumTopics));
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._TrainingBlockings = new EntitySet<TrainingBlocking>(new Action<TrainingBlocking>(this.attach_TrainingBlockings), new Action<TrainingBlocking>(this.detach_TrainingBlockings));
			this._Course1 = default(EntityRef<Course>);
			this._Group = default(EntityRef<Group>);
			this._Group1 = default(EntityRef<Group>);
			this._Group2 = default(EntityRef<Group>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_Course", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Course
		{
			get
			{
				return this._Course;
			}
			set
			{
				if ((this._Course != value))
				{
					if (this._Course1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseChanging(value);
					this.SendPropertyChanging();
					this._Course = value;
					this.SendPropertyChanged("Course");
					this.OnCourseChanged();
				}
			}
		}
		
		[Column(Storage="_isPublic", DbType="Bit NOT NULL")]
		public bool isPublic
		{
			get
			{
				return this._isPublic;
			}
			set
			{
				if ((this._isPublic != value))
				{
					this.OnisPublicChanging(value);
					this.SendPropertyChanging();
					this._isPublic = value;
					this.SendPropertyChanged("isPublic");
					this.OnisPublicChanged();
				}
			}
		}
		
		[Column(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Instructors", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Instructors
		{
			get
			{
				return this._Instructors;
			}
			set
			{
				if ((this._Instructors != value))
				{
					if (this._Group1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstructorsChanging(value);
					this.SendPropertyChanging();
					this._Instructors = value;
					this.SendPropertyChanged("Instructors");
					this.OnInstructorsChanged();
				}
			}
		}
		
		[Column(Storage="_Curators", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Curators
		{
			get
			{
				return this._Curators;
			}
			set
			{
				if ((this._Curators != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCuratorsChanging(value);
					this.SendPropertyChanging();
					this._Curators = value;
					this.SendPropertyChanged("Curators");
					this.OnCuratorsChanged();
				}
			}
		}
		
		[Column(Storage="_Students", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				if ((this._Students != value))
				{
					if (this._Group2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentsChanging(value);
					this.SendPropertyChanging();
					this._Students = value;
					this.SendPropertyChanged("Students");
					this.OnStudentsChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStrict", DbType="Bit NOT NULL")]
		public bool TimeStrict
		{
			get
			{
				return this._TimeStrict;
			}
			set
			{
				if ((this._TimeStrict != value))
				{
					this.OnTimeStrictChanging(value);
					this.SendPropertyChanging();
					this._TimeStrict = value;
					this.SendPropertyChanged("TimeStrict");
					this.OnTimeStrictChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_TestOnly", DbType="Bit NOT NULL")]
		public bool TestOnly
		{
			get
			{
				return this._TestOnly;
			}
			set
			{
				if ((this._TestOnly != value))
				{
					this.OnTestOnlyChanging(value);
					this.SendPropertyChanging();
					this._TestOnly = value;
					this.SendPropertyChanged("TestOnly");
					this.OnTestOnlyChanged();
				}
			}
		}
		
		[Column(Storage="_Expires", DbType="Bit NOT NULL")]
		public bool Expires
		{
			get
			{
				return this._Expires;
			}
			set
			{
				if ((this._Expires != value))
				{
					this.OnExpiresChanging(value);
					this.SendPropertyChanging();
					this._Expires = value;
					this.SendPropertyChanged("Expires");
					this.OnExpiresChanged();
				}
			}
		}
		
		[Association(Name="Training_CDPath", Storage="_CDPaths", ThisKey="id", OtherKey="trainingId")]
		public EntitySet<CDPath> CDPaths
		{
			get
			{
				return this._CDPaths;
			}
			set
			{
				this._CDPaths.Assign(value);
			}
		}
		
		[Association(Name="Training_ForumTopic", Storage="_ForumTopics", ThisKey="id", OtherKey="Training")]
		public EntitySet<ForumTopic> ForumTopics
		{
			get
			{
				return this._ForumTopics;
			}
			set
			{
				this._ForumTopics.Assign(value);
			}
		}
		
		[Association(Name="Training_Schedule", Storage="_Schedules", ThisKey="id", OtherKey="Training")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[Association(Name="Training_Task", Storage="_Tasks", ThisKey="id", OtherKey="Training")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[Association(Name="Training_TrainingBlocking", Storage="_TrainingBlockings", ThisKey="id", OtherKey="Training")]
		public EntitySet<TrainingBlocking> TrainingBlockings
		{
			get
			{
				return this._TrainingBlockings;
			}
			set
			{
				this._TrainingBlockings.Assign(value);
			}
		}
		
		[Association(Name="Course_Training", Storage="_Course1", ThisKey="Course", OtherKey="id", IsForeignKey=true)]
		public Course Course1
		{
			get
			{
				return this._Course1.Entity;
			}
			set
			{
				Course previousValue = this._Course1.Entity;
				if (((previousValue != value) 
							|| (this._Course1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course1.Entity = null;
						previousValue.Trainings.Remove(this);
					}
					this._Course1.Entity = value;
					if ((value != null))
					{
						value.Trainings.Add(this);
						this._Course = value.id;
					}
					else
					{
						this._Course = default(System.Guid);
					}
					this.SendPropertyChanged("Course1");
				}
			}
		}
		
		[Association(Name="Group_Training", Storage="_Group", ThisKey="Curators", OtherKey="id", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Trainings.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Trainings.Add(this);
						this._Curators = value.id;
					}
					else
					{
						this._Curators = default(System.Guid);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[Association(Name="Group_Training1", Storage="_Group1", ThisKey="Instructors", OtherKey="id", IsForeignKey=true)]
		public Group Group1
		{
			get
			{
				return this._Group1.Entity;
			}
			set
			{
				Group previousValue = this._Group1.Entity;
				if (((previousValue != value) 
							|| (this._Group1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group1.Entity = null;
						previousValue.Trainings1.Remove(this);
					}
					this._Group1.Entity = value;
					if ((value != null))
					{
						value.Trainings1.Add(this);
						this._Instructors = value.id;
					}
					else
					{
						this._Instructors = default(System.Guid);
					}
					this.SendPropertyChanged("Group1");
				}
			}
		}
		
		[Association(Name="Group_Training2", Storage="_Group2", ThisKey="Students", OtherKey="id", IsForeignKey=true)]
		public Group Group2
		{
			get
			{
				return this._Group2.Entity;
			}
			set
			{
				Group previousValue = this._Group2.Entity;
				if (((previousValue != value) 
							|| (this._Group2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group2.Entity = null;
						previousValue.Trainings2.Remove(this);
					}
					this._Group2.Entity = value;
					if ((value != null))
					{
						value.Trainings2.Add(this);
						this._Students = value.id;
					}
					else
					{
						this._Students = default(System.Guid);
					}
					this.SendPropertyChanged("Group2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CDPaths(CDPath entity)
		{
			this.SendPropertyChanging();
			entity.Training = this;
		}
		
		private void detach_CDPaths(CDPath entity)
		{
			this.SendPropertyChanging();
			entity.Training = null;
		}
		
		private void attach_ForumTopics(ForumTopic entity)
		{
			this.SendPropertyChanging();
			entity.Training1 = this;
		}
		
		private void detach_ForumTopics(ForumTopic entity)
		{
			this.SendPropertyChanging();
			entity.Training1 = null;
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Training1 = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Training1 = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Training1 = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Training1 = null;
		}
		
		private void attach_TrainingBlockings(TrainingBlocking entity)
		{
			this.SendPropertyChanging();
			entity.Training1 = this;
		}
		
		private void detach_TrainingBlockings(TrainingBlocking entity)
		{
			this.SendPropertyChanging();
			entity.Training1 = null;
		}
	}
	
	[Table(Name="dbo.UserProfileData")]
	public partial class UserProfileData
	{
		
		private System.Guid _UserID;
		
		private System.Nullable<int> _AnonymousID;
		
		private System.Xml.Linq.XElement _WebProfileXmlData;
		
		public UserProfileData()
		{
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_AnonymousID", DbType="Int")]
		public System.Nullable<int> AnonymousID
		{
			get
			{
				return this._AnonymousID;
			}
			set
			{
				if ((this._AnonymousID != value))
				{
					this._AnonymousID = value;
				}
			}
		}
		
		[Column(Storage="_WebProfileXmlData", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement WebProfileXmlData
		{
			get
			{
				return this._WebProfileXmlData;
			}
			set
			{
				if ((this._WebProfileXmlData != value))
				{
					this._WebProfileXmlData = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.UserRoles")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private System.Guid _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnRoleChanging(System.Guid value);
    partial void OnRoleChanged();
    #endregion
		
		public UserRole()
		{
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Role", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Vocabulary")]
	public partial class Vocabulary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _Course;
		
		private System.Guid _Term;
		
		private EntityRef<Course> _Course1;
		
		private EntityRef<VTerm> _VTerm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnCourseChanging(System.Guid value);
    partial void OnCourseChanged();
    partial void OnTermChanging(System.Guid value);
    partial void OnTermChanged();
    #endregion
		
		public Vocabulary()
		{
			this._Course1 = default(EntityRef<Course>);
			this._VTerm = default(EntityRef<VTerm>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Course", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Course
		{
			get
			{
				return this._Course;
			}
			set
			{
				if ((this._Course != value))
				{
					if (this._Course1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseChanging(value);
					this.SendPropertyChanging();
					this._Course = value;
					this.SendPropertyChanged("Course");
					this.OnCourseChanged();
				}
			}
		}
		
		[Column(Storage="_Term", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Term
		{
			get
			{
				return this._Term;
			}
			set
			{
				if ((this._Term != value))
				{
					if (this._VTerm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTermChanging(value);
					this.SendPropertyChanging();
					this._Term = value;
					this.SendPropertyChanged("Term");
					this.OnTermChanged();
				}
			}
		}
		
		[Association(Name="Course_Vocabulary", Storage="_Course1", ThisKey="Course", OtherKey="id", IsForeignKey=true)]
		public Course Course1
		{
			get
			{
				return this._Course1.Entity;
			}
			set
			{
				Course previousValue = this._Course1.Entity;
				if (((previousValue != value) 
							|| (this._Course1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course1.Entity = null;
						previousValue.Vocabularies.Remove(this);
					}
					this._Course1.Entity = value;
					if ((value != null))
					{
						value.Vocabularies.Add(this);
						this._Course = value.id;
					}
					else
					{
						this._Course = default(System.Guid);
					}
					this.SendPropertyChanged("Course1");
				}
			}
		}
		
		[Association(Name="VTerm_Vocabulary", Storage="_VTerm", ThisKey="Term", OtherKey="id", IsForeignKey=true)]
		public VTerm VTerm
		{
			get
			{
				return this._VTerm.Entity;
			}
			set
			{
				VTerm previousValue = this._VTerm.Entity;
				if (((previousValue != value) 
							|| (this._VTerm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VTerm.Entity = null;
						previousValue.Vocabularies.Remove(this);
					}
					this._VTerm.Entity = value;
					if ((value != null))
					{
						value.Vocabularies.Add(this);
						this._Term = value.id;
					}
					else
					{
						this._Term = default(System.Guid);
					}
					this.SendPropertyChanged("VTerm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class AllDistinctTrainingStudentsResult
	{
		
		private System.Nullable<System.Guid> _id;
		
		public AllDistinctTrainingStudentsResult()
		{
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
	}
	
	public partial class AllGroupMembersResult
	{
		
		private System.Nullable<System.Guid> _mid;
		
		private System.Nullable<System.Guid> _id;
		
		private System.Nullable<int> _Type;
		
		private System.Nullable<System.Guid> _MGroup;
		
		private string _name;
		
		public AllGroupMembersResult()
		{
		}
		
		[Column(Storage="_mid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> mid
		{
			get
			{
				return this._mid;
			}
			set
			{
				if ((this._mid != value))
				{
					this._mid = value;
				}
			}
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[Column(Storage="_MGroup", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MGroup
		{
			get
			{
				return this._MGroup;
			}
			set
			{
				if ((this._MGroup != value))
				{
					this._MGroup = value;
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
	}
	
	public partial class AllStudentTrainingsResult
	{
		
		private System.Nullable<System.Guid> _id;
		
		public AllStudentTrainingsResult()
		{
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
	}
	
	public partial class AllSubThemesResult
	{
		
		private System.Nullable<System.Guid> _parentid;
		
		private System.Nullable<System.Guid> _id;
		
		private string _name;
		
		public AllSubThemesResult()
		{
		}
		
		[Column(Storage="_parentid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> parentid
		{
			get
			{
				return this._parentid;
			}
			set
			{
				if ((this._parentid != value))
				{
					this._parentid = value;
				}
			}
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
	}
	
	public partial class AllTrainingStudentsResult
	{
		
		private System.Nullable<System.Guid> _mid;
		
		private System.Nullable<System.Guid> _id;
		
		private System.Nullable<int> _Type;
		
		private System.Nullable<System.Guid> _MGroup;
		
		private string _name;
		
		public AllTrainingStudentsResult()
		{
		}
		
		[Column(Storage="_mid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> mid
		{
			get
			{
				return this._mid;
			}
			set
			{
				if ((this._mid != value))
				{
					this._mid = value;
				}
			}
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[Column(Storage="_MGroup", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MGroup
		{
			get
			{
				return this._MGroup;
			}
			set
			{
				if ((this._MGroup != value))
				{
					this._MGroup = value;
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
	}
	
	public partial class CountStudentsPassedTestResult
	{
		
		private System.Nullable<System.Guid> _id;
		
		private System.Nullable<int> _total;
		
		private System.Nullable<int> _avgpoints;
		
		public CountStudentsPassedTestResult()
		{
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_total", DbType="Int")]
		public System.Nullable<int> total
		{
			get
			{
				return this._total;
			}
			set
			{
				if ((this._total != value))
				{
					this._total = value;
				}
			}
		}
		
		[Column(Storage="_avgpoints", DbType="Int")]
		public System.Nullable<int> avgpoints
		{
			get
			{
				return this._avgpoints;
			}
			set
			{
				if ((this._avgpoints != value))
				{
					this._avgpoints = value;
				}
			}
		}
	}
	
	public partial class CourseTestsResult
	{
		
		private System.Nullable<System.Guid> _id;
		
		private System.Nullable<int> _Type;
		
		public CourseTestsResult()
		{
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
	}
	
	public partial class dcereports_Fn_Tests_GetStudentTestResultsResult
	{
		
		private System.Guid _id;
		
		private System.Guid _Test;
		
		private System.Guid _Student;
		
		private bool _Complete;
		
		private System.Nullable<System.DateTime> _CompletionDate;
		
		private System.Nullable<int> _Tries;
		
		private System.Nullable<int> _AllowTries;
		
		private System.Nullable<System.DateTime> _TryStart;
		
		private bool _Skipped;
		
		private string _Comments;
		
		private string _FullName;
		
		private string _JobPosition;
		
		private System.Guid _UserID;
		
		public dcereports_Fn_Tests_GetStudentTestResultsResult()
		{
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_Test", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Test
		{
			get
			{
				return this._Test;
			}
			set
			{
				if ((this._Test != value))
				{
					this._Test = value;
				}
			}
		}
		
		[Column(Storage="_Student", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Student
		{
			get
			{
				return this._Student;
			}
			set
			{
				if ((this._Student != value))
				{
					this._Student = value;
				}
			}
		}
		
		[Column(Storage="_Complete", DbType="Bit NOT NULL")]
		public bool Complete
		{
			get
			{
				return this._Complete;
			}
			set
			{
				if ((this._Complete != value))
				{
					this._Complete = value;
				}
			}
		}
		
		[Column(Storage="_CompletionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompletionDate
		{
			get
			{
				return this._CompletionDate;
			}
			set
			{
				if ((this._CompletionDate != value))
				{
					this._CompletionDate = value;
				}
			}
		}
		
		[Column(Storage="_Tries", DbType="Int")]
		public System.Nullable<int> Tries
		{
			get
			{
				return this._Tries;
			}
			set
			{
				if ((this._Tries != value))
				{
					this._Tries = value;
				}
			}
		}
		
		[Column(Storage="_AllowTries", DbType="Int")]
		public System.Nullable<int> AllowTries
		{
			get
			{
				return this._AllowTries;
			}
			set
			{
				if ((this._AllowTries != value))
				{
					this._AllowTries = value;
				}
			}
		}
		
		[Column(Storage="_TryStart", DbType="DateTime")]
		public System.Nullable<System.DateTime> TryStart
		{
			get
			{
				return this._TryStart;
			}
			set
			{
				if ((this._TryStart != value))
				{
					this._TryStart = value;
				}
			}
		}
		
		[Column(Storage="_Skipped", DbType="Bit NOT NULL")]
		public bool Skipped
		{
			get
			{
				return this._Skipped;
			}
			set
			{
				if ((this._Skipped != value))
				{
					this._Skipped = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(255)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(255)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_JobPosition", DbType="NVarChar(155)")]
		public string JobPosition
		{
			get
			{
				return this._JobPosition;
			}
			set
			{
				if ((this._JobPosition != value))
				{
					this._JobPosition = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
	}
	
	public partial class dcereports_Fn_Tests_GetTestResultsResult
	{
		
		private System.Guid _id;
		
		private System.Guid _Test;
		
		private System.Guid _Student;
		
		private bool _Complete;
		
		private System.Nullable<System.DateTime> _CompletionDate;
		
		private System.Nullable<int> _Tries;
		
		private System.Nullable<int> _AllowTries;
		
		private System.Nullable<System.DateTime> _TryStart;
		
		private bool _Skipped;
		
		private string _Comments;
		
		private string _FullName;
		
		private string _JobPosition;
		
		private System.Guid _UserID;
		
		public dcereports_Fn_Tests_GetTestResultsResult()
		{
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_Test", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Test
		{
			get
			{
				return this._Test;
			}
			set
			{
				if ((this._Test != value))
				{
					this._Test = value;
				}
			}
		}
		
		[Column(Storage="_Student", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Student
		{
			get
			{
				return this._Student;
			}
			set
			{
				if ((this._Student != value))
				{
					this._Student = value;
				}
			}
		}
		
		[Column(Storage="_Complete", DbType="Bit NOT NULL")]
		public bool Complete
		{
			get
			{
				return this._Complete;
			}
			set
			{
				if ((this._Complete != value))
				{
					this._Complete = value;
				}
			}
		}
		
		[Column(Storage="_CompletionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompletionDate
		{
			get
			{
				return this._CompletionDate;
			}
			set
			{
				if ((this._CompletionDate != value))
				{
					this._CompletionDate = value;
				}
			}
		}
		
		[Column(Storage="_Tries", DbType="Int")]
		public System.Nullable<int> Tries
		{
			get
			{
				return this._Tries;
			}
			set
			{
				if ((this._Tries != value))
				{
					this._Tries = value;
				}
			}
		}
		
		[Column(Storage="_AllowTries", DbType="Int")]
		public System.Nullable<int> AllowTries
		{
			get
			{
				return this._AllowTries;
			}
			set
			{
				if ((this._AllowTries != value))
				{
					this._AllowTries = value;
				}
			}
		}
		
		[Column(Storage="_TryStart", DbType="DateTime")]
		public System.Nullable<System.DateTime> TryStart
		{
			get
			{
				return this._TryStart;
			}
			set
			{
				if ((this._TryStart != value))
				{
					this._TryStart = value;
				}
			}
		}
		
		[Column(Storage="_Skipped", DbType="Bit NOT NULL")]
		public bool Skipped
		{
			get
			{
				return this._Skipped;
			}
			set
			{
				if ((this._Skipped != value))
				{
					this._Skipped = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(255)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(255)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_JobPosition", DbType="NVarChar(155)")]
		public string JobPosition
		{
			get
			{
				return this._JobPosition;
			}
			set
			{
				if ((this._JobPosition != value))
				{
					this._JobPosition = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
	}
	
	public partial class dcereports_Fn_TutorDiary_GetTrainingsOfCourseTypeResult
	{
		
		private System.Guid _TrainingID;
		
		private string _RegionName;
		
		private string _CourseName;
		
		private System.Nullable<int> _StudentCount;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<int> _PassedFinalTest;
		
		public dcereports_Fn_TutorDiary_GetTrainingsOfCourseTypeResult()
		{
		}
		
		[Column(Storage="_TrainingID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TrainingID
		{
			get
			{
				return this._TrainingID;
			}
			set
			{
				if ((this._TrainingID != value))
				{
					this._TrainingID = value;
				}
			}
		}
		
		[Column(Storage="_RegionName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string RegionName
		{
			get
			{
				return this._RegionName;
			}
			set
			{
				if ((this._RegionName != value))
				{
					this._RegionName = value;
				}
			}
		}
		
		[Column(Storage="_CourseName", DbType="NVarChar(255)")]
		public string CourseName
		{
			get
			{
				return this._CourseName;
			}
			set
			{
				if ((this._CourseName != value))
				{
					this._CourseName = value;
				}
			}
		}
		
		[Column(Storage="_StudentCount", DbType="Int")]
		public System.Nullable<int> StudentCount
		{
			get
			{
				return this._StudentCount;
			}
			set
			{
				if ((this._StudentCount != value))
				{
					this._StudentCount = value;
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this._StartDate = value;
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
		
		[Column(Storage="_PassedFinalTest", DbType="Int")]
		public System.Nullable<int> PassedFinalTest
		{
			get
			{
				return this._PassedFinalTest;
			}
			set
			{
				if ((this._PassedFinalTest != value))
				{
					this._PassedFinalTest = value;
				}
			}
		}
	}
	
	public partial class dcetools_Fn_Access_FindUsersByAnyResult
	{
		
		private System.Nullable<System.Guid> _ID;
		
		private string _Login;
		
		private string _FullName;
		
		private string _EMail;
		
		private string _JobPosition;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _LastModifyDate;
		
		private System.Nullable<System.Guid> _RegionID;
		
		private string _RegionName;
		
		private System.Nullable<System.Guid> _RoleID;
		
		private string _RoleName;
		
		public dcetools_Fn_Access_FindUsersByAnyResult()
		{
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Login", DbType="NVarChar(255)")]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this._Login = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(255)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_EMail", DbType="NVarChar(255)")]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this._EMail = value;
				}
			}
		}
		
		[Column(Storage="_JobPosition", DbType="NVarChar(255)")]
		public string JobPosition
		{
			get
			{
				return this._JobPosition;
			}
			set
			{
				if ((this._JobPosition != value))
				{
					this._JobPosition = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(255)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this._CreateDate = value;
				}
			}
		}
		
		[Column(Storage="_LastModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifyDate
		{
			get
			{
				return this._LastModifyDate;
			}
			set
			{
				if ((this._LastModifyDate != value))
				{
					this._LastModifyDate = value;
				}
			}
		}
		
		[Column(Storage="_RegionID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this._RegionID = value;
				}
			}
		}
		
		[Column(Storage="_RegionName", DbType="NVarChar(255)")]
		public string RegionName
		{
			get
			{
				return this._RegionName;
			}
			set
			{
				if ((this._RegionName != value))
				{
					this._RegionName = value;
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="NVarChar(255)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
	}
	
	public partial class dcetools_Fn_Courses_GetTestIdListResult
	{
		
		private System.Guid _ID;
		
		public dcetools_Fn_Courses_GetTestIdListResult()
		{
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
	
	public partial class dcetools_Fn_Courses_GetTestResultIdListResult
	{
		
		private System.Guid _ID;
		
		public dcetools_Fn_Courses_GetTestResultIdListResult()
		{
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
	
	public partial class dcetools_Fn_Courses_Themes_GetCourseThemeIDListResult
	{
		
		private System.Guid _ID;
		
		public dcetools_Fn_Courses_Themes_GetCourseThemeIDListResult()
		{
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
	
	public partial class dcetools_Fn_Courses_Themes_GetCourseThemesResult
	{
		
		private System.Guid _ID;
		
		private byte _Type;
		
		private string _Name;
		
		private System.Nullable<System.Guid> _ParentThemeID;
		
		private int _Duration;
		
		private bool _Mandatory;
		
		private string _ContentHref;
		
		private int _OrderIndex;
		
		public dcetools_Fn_Courses_Themes_GetCourseThemesResult()
		{
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_ParentThemeID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentThemeID
		{
			get
			{
				return this._ParentThemeID;
			}
			set
			{
				if ((this._ParentThemeID != value))
				{
					this._ParentThemeID = value;
				}
			}
		}
		
		[Column(Storage="_Duration", DbType="Int NOT NULL")]
		public int Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this._Duration = value;
				}
			}
		}
		
		[Column(Storage="_Mandatory", DbType="Bit NOT NULL")]
		public bool Mandatory
		{
			get
			{
				return this._Mandatory;
			}
			set
			{
				if ((this._Mandatory != value))
				{
					this._Mandatory = value;
				}
			}
		}
		
		[Column(Storage="_ContentHref", DbType="NVarChar(255)")]
		public string ContentHref
		{
			get
			{
				return this._ContentHref;
			}
			set
			{
				if ((this._ContentHref != value))
				{
					this._ContentHref = value;
				}
			}
		}
		
		[Column(Storage="_OrderIndex", DbType="Int NOT NULL")]
		public int OrderIndex
		{
			get
			{
				return this._OrderIndex;
			}
			set
			{
				if ((this._OrderIndex != value))
				{
					this._OrderIndex = value;
				}
			}
		}
	}
	
	public partial class dcetools_Fn_Orders_GetCourseAvailableTrainingsWithDatesResult
	{
		
		private System.Guid _ID;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		public dcetools_Fn_Orders_GetCourseAvailableTrainingsWithDatesResult()
		{
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this._StartDate = value;
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
	}
	
	public partial class dcetools_Fn_Regions_GetIdListResult
	{
		
		private System.Nullable<System.Guid> _ID;
		
		public dcetools_Fn_Regions_GetIdListResult()
		{
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
	
	public partial class dcetools_Fn_Regions_GetIdNameListResult
	{
		
		private System.Nullable<System.Guid> _ID;
		
		private string _RegionName;
		
		public dcetools_Fn_Regions_GetIdNameListResult()
		{
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_RegionName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string RegionName
		{
			get
			{
				return this._RegionName;
			}
			set
			{
				if ((this._RegionName != value))
				{
					this._RegionName = value;
				}
			}
		}
	}
	
	public partial class dcetools_Fn_Trainings_GetTrainingNameResult
	{
		
		private string _Name;
		
		public dcetools_Fn_Trainings_GetTrainingNameResult()
		{
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class dcetools_Fn_Trainings_Schedule_GetTrainingScheduleIDListResult
	{
		
		private System.Guid _ID;
		
		public dcetools_Fn_Trainings_Schedule_GetTrainingScheduleIDListResult()
		{
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
	
	public partial class dcetools_Fn_Trainings_Students_GetIDListResult
	{
		
		private System.Guid _ID;
		
		public dcetools_Fn_Trainings_Students_GetIDListResult()
		{
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
	
	public partial class dcetools_Fn_Trainings_Students_GetStudentTrainingIDListResult
	{
		
		private System.Guid _ID;
		
		public dcetools_Fn_Trainings_Students_GetStudentTrainingIDListResult()
		{
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
	
	public partial class TrainingTestsResult
	{
		
		private System.Nullable<System.Guid> _id;
		
		private System.Nullable<int> _Type;
		
		public TrainingTestsResult()
		{
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
	}
	
	public partial class TrainingTests_TrainingsFromTestResult
	{
		
		private System.Guid _id;
		
		private string _Code;
		
		private System.Guid _Name;
		
		private System.Guid _Comment;
		
		private System.Guid _Course;
		
		private bool _isPublic;
		
		private bool _isActive;
		
		private System.Guid _Instructors;
		
		private System.Guid _Curators;
		
		private System.Guid _Students;
		
		private bool _TimeStrict;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private bool _TestOnly;
		
		private bool _Expires;
		
		public TrainingTests_TrainingsFromTestResult()
		{
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this._Code = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
		
		[Column(Storage="_Course", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Course
		{
			get
			{
				return this._Course;
			}
			set
			{
				if ((this._Course != value))
				{
					this._Course = value;
				}
			}
		}
		
		[Column(Storage="_isPublic", DbType="Bit NOT NULL")]
		public bool isPublic
		{
			get
			{
				return this._isPublic;
			}
			set
			{
				if ((this._isPublic != value))
				{
					this._isPublic = value;
				}
			}
		}
		
		[Column(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this._isActive = value;
				}
			}
		}
		
		[Column(Storage="_Instructors", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Instructors
		{
			get
			{
				return this._Instructors;
			}
			set
			{
				if ((this._Instructors != value))
				{
					this._Instructors = value;
				}
			}
		}
		
		[Column(Storage="_Curators", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Curators
		{
			get
			{
				return this._Curators;
			}
			set
			{
				if ((this._Curators != value))
				{
					this._Curators = value;
				}
			}
		}
		
		[Column(Storage="_Students", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				if ((this._Students != value))
				{
					this._Students = value;
				}
			}
		}
		
		[Column(Storage="_TimeStrict", DbType="Bit NOT NULL")]
		public bool TimeStrict
		{
			get
			{
				return this._TimeStrict;
			}
			set
			{
				if ((this._TimeStrict != value))
				{
					this._TimeStrict = value;
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this._StartDate = value;
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
		
		[Column(Storage="_TestOnly", DbType="Bit NOT NULL")]
		public bool TestOnly
		{
			get
			{
				return this._TestOnly;
			}
			set
			{
				if ((this._TestOnly != value))
				{
					this._TestOnly = value;
				}
			}
		}
		
		[Column(Storage="_Expires", DbType="Bit NOT NULL")]
		public bool Expires
		{
			get
			{
				return this._Expires;
			}
			set
			{
				if ((this._Expires != value))
				{
					this._Expires = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
